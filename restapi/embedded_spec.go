// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Archer is an API service that can privately connect services from one private [OpenStack Network](https://docs.openstack.org/neutron/latest/admin/intro-os-networking.html) to another. Consumers can select a *service* from a service catalog and **inject** it to their network, which means making this *service* available via a private ip address.\n\nArcher implements an *OpenStack* like API and integrates with *OpenStack Keystone* and *OpenStack Neutron*.\n\n### Architecture\nThere are two types of resources: **services** and **endpoints**\n\n* **Services** are private or public services that are manually configured in *Archer*. They can be accessed by creating an endpoint.\n* **Service endpoints**, or short **endpoints**, are IP endpoints in a local network used to transparently access services residing in different private networks.\n\n### Features\n* Multi-tenant capable via OpenStack Identity service\n* OpenStack ` + "`" + `policy.json` + "`" + ` access policy support\n* Prometheus Exporter\n* Rate limiting\n\n### Supported Backends\n* F5 BigIP\n\n### Requirements\n* PostgreSQL Database\n\n### API\nThe **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in ` + "`" + `X-Auth-Token` + "`" + ` request header. \nYou obtain the token by authenticating to the Keystone endpoint.\n\nWhen Keystone is enabled, the ` + "`" + `project_id` + "`" + ` attribute is not required in create requests because the project ID is derived from the authentication token.\n",
    "title": "üèπ Archer",
    "contact": {
      "name": "SAP SE / Converged Cloud",
      "url": "https://sap.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.3.0",
    "x-logo": {
      "altText": "Archer logo",
      "backgroundColor": "#FFFFFF",
      "url": "https://avatars.githubusercontent.com/u/4242847"
    }
  },
  "paths": {
    "/": {
      "get": {
        "security": [],
        "tags": [
          "Version"
        ],
        "summary": "Shows details for Archer API",
        "responses": {
          "200": {
            "description": "Version",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        }
      }
    },
    "/endpoint": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "List existing service endpoints",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of endpoints.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Endpoint"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "endpoint:read"
      },
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Create endpoint for accessing a service",
        "parameters": [
          {
            "description": "Service and target network to inject. Only one of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint",
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "endpoint:create"
      }
    },
    "/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Show existing service endpoint",
        "responses": {
          "200": {
            "description": "An endpoint detail.",
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "endpoint:read"
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Remove an existing endpoint",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "endpoint:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the endpoint",
          "name": "endpoint_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/quotas": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "List Quotas",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of quotas",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                },
                "quotas": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/Quota"
                      },
                      {
                        "$ref": "#/definitions/QuotaUsage"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "project_id": {
                            "$ref": "#/definitions/Project"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:read"
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "query"
        }
      ]
    },
    "/quotas/defaults": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "Show Quota Defaults",
        "responses": {
          "200": {
            "description": "Show the quota defaults configured for new projects.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "quota:read-defaults"
      }
    },
    "/quotas/{project_id}": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "Show Quota detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/Quota"
                    },
                    {
                      "$ref": "#/definitions/QuotaUsage"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:read"
      },
      "put": {
        "tags": [
          "Quota"
        ],
        "summary": "Update Quota",
        "parameters": [
          {
            "name": "quota",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "quota"
              ],
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated quota for a project.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:update"
      },
      "delete": {
        "tags": [
          "Quota"
        ],
        "summary": "Reset all Quota of a project",
        "responses": {
          "204": {
            "description": "Resource successfully reset"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:delete"
      },
      "parameters": [
        {
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/rbac-policies": {
      "get": {
        "tags": [
          "RBAC"
        ],
        "summary": "List RBAC policies",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of rbac policies",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RBACPolicy"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "rbac-policy:read"
      },
      "post": {
        "tags": [
          "RBAC"
        ],
        "summary": "Create RBAC policy",
        "parameters": [
          {
            "description": "RBAC Policy",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RBAC policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:create"
      }
    },
    "/rbac-policies/{rbac_policy_id}": {
      "get": {
        "tags": [
          "RBAC"
        ],
        "summary": "Show details of an RBAC policy",
        "responses": {
          "200": {
            "description": "RBAC Policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:read"
      },
      "put": {
        "tags": [
          "RBAC"
        ],
        "summary": "Update an existing RBAC policy",
        "parameters": [
          {
            "description": "RBAC policy resource that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RBACPolicyCommon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RBAC Policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicyCommon"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:update"
      },
      "delete": {
        "tags": [
          "RBAC"
        ],
        "summary": "Delete RBAC policy",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the RBAC policy.",
          "name": "rbac_policy_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List services",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of services.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Service"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "service:read"
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Add a new service to the catalog",
        "parameters": [
          {
            "description": "Service object that needs to be added to the catalog",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:create"
      }
    },
    "/service/{service_id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Show details of an service",
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:read"
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing service",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:update"
      },
      "delete": {
        "description": "Deletes this service. There **must** be no active associated endpoint for successfully deleting the service. \nActive endpoints can be rejected by the service owner via the ` + "`" + `/service/{service_id}/reject_endpoints` + "`" + ` API.\n",
        "tags": [
          "Service"
        ],
        "summary": "Remove service from catalog",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "In use.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/accept_endpoints": {
      "put": {
        "description": "Specify a list of endpoint consumers (` + "`" + `endpoint_ids` + "`" + ` and/or ` + "`" + `project_ids` + "`" + `) whose endpoints should be accepted.\n* Existing active endpoints will be untouched.\n* Rejected endpoints will be accepted.\n* Pending endpoints will be accepted.\n",
        "tags": [
          "Service"
        ],
        "summary": "Accept endpoints",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointConsumerList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConsumer"
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service-endpoint:accept"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/endpoints": {
      "get": {
        "description": "Provides a list of service consumers (endpoints).\n\nThis list can be used to accept or reject requests, or disable active endpoints. \nRejected endpoints will be cleaned up after a specific time.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service endpoints consumers",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of service endpoint consumers.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndpointConsumer"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service-endpoint:read"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/reject_endpoints": {
      "put": {
        "description": "Specify a list of consumers (` + "`" + `endpoint_ids` + "`" + ` and/or ` + "`" + `project_ids` + "`" + `) whose endpoints should be rejected.\n* Existing active endpoints will be rejected.\n* Rejected endpoints will be untouched.\n* Pending endpoints will be rejected.\n",
        "tags": [
          "Service"
        ],
        "summary": "Reject endpoints",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointConsumerList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConsumer"
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "service-endpoint:reject"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Endpoint": {
      "type": "object",
      "properties": {
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "service_id": {
          "description": "The ID of the service.",
          "type": "string",
          "format": "uuid"
        },
        "service_name": {
          "description": "The name of the service.",
          "type": "string",
          "readOnly": true,
          "example": "Example Service"
        },
        "status": {
          "$ref": "#/definitions/EndpointStatus"
        },
        "target": {
          "description": "Endpoint target",
          "type": "object",
          "properties": {
            "network": {
              "description": "Endpoint network target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "49b6480b-24d3-4376-a4c9-aecbb89e16d9"
            },
            "port": {
              "description": "Endpoint port target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "b2accf1a-1c99-4b54-9eeb-22be53f177f5"
            },
            "subnet": {
              "description": "Endpoint subnet target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "1fb12a1a-a1a5-4732-9a2e-635ba6ec8d3b"
            }
          }
        },
        "updated_at": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "EndpointConsumer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/EndpointStatus"
        }
      }
    },
    "EndpointConsumerList": {
      "description": "list of consumer ids.",
      "type": "object",
      "properties": {
        "endpoint_ids": {
          "type": "array",
          "items": {
            "description": "The ID of a service endpoint consumer.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "project_ids": {
          "type": "array",
          "items": {
            "description": "The ID of a project.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        }
      }
    },
    "EndpointStatus": {
      "description": "Status of the endpoint\n\n### Status can be one of\n| Status             | Description                           |\n| ------------------ | ------------------------------------- |\n| AVAILABLE          | Endpoint is active for consumption    |\n| PENDING_APPROVAL   | Endpoint is waiting for approval      |\n| PENDING_CREATE     | Endpoint is being set up              |\n| PENDING_DELETE     | Endpoint is being deleted             |\n| REJECTED           | Endpoint was rejected                 |\n| FAILED             | Endpoint setup failed                 |\n",
      "type": "string",
      "enum": [
        "ACTIVE",
        "PENDING_APPROVAL",
        "PENDING_CREATE",
        "PENDING_DELETE",
        "REJECTED",
        "FAILED"
      ],
      "readOnly": true
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "example": "/"
        },
        "rel": {
          "type": "string",
          "example": "self"
        }
      }
    },
    "Project": {
      "description": "The ID of the project owning this resource.",
      "type": "string",
      "maxLength": 32,
      "minLength": 32,
      "x-omitempty": false,
      "example": "fa84c217f361441986a220edf9b1e337"
    },
    "Quota": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The configured endpoint quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "service": {
          "description": "The configured service quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        }
      }
    },
    "QuotaUsage": {
      "type": "object",
      "properties": {
        "in_use_endpoint": {
          "description": "The current quota usage of endpoints.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_service": {
          "description": "The current quota usage of services.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        }
      }
    },
    "RBACPolicy": {
      "type": "object",
      "required": [
        "service_id"
      ],
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "service_id": {
          "description": "The ID of the service resource.",
          "type": "string",
          "format": "uuid"
        },
        "target": {
          "description": "The ID of the project to which the RBAC policy will be enforced.",
          "type": "string",
          "example": "666da95112694b37b3efb0913de3f499"
        },
        "target_type": {
          "type": "string",
          "enum": [
            "project_id",
            "domain_id"
          ]
        }
      },
      "x-go-name": "rbacpolicy"
    },
    "RBACPolicyCommon": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "target": {
          "description": "The ID of the project to which the RBAC policy will be enforced.",
          "type": "string",
          "example": "666da95112694b37b3efb0913de3f499"
        },
        "target_type": {
          "type": "string",
          "enum": [
            "project_id",
            "domain_id"
          ]
        }
      },
      "x-go-name": "rbacpolicycommon"
    },
    "Service": {
      "type": "object",
      "required": [
        "port",
        "network_id",
        "ip_addresses"
      ],
      "properties": {
        "availability_zone": {
          "description": "Availability zone of this service.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "AZ-A"
        },
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "description": {
          "description": "Description of the service.",
          "type": "string",
          "maxLength": 255,
          "x-omitempty": false,
          "example": "An example of an Service."
        },
        "enabled": {
          "description": "Enable/disable this service. Existing endpoints are not touched by this.",
          "type": "boolean"
        },
        "host": {
          "description": "Device host.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "ip_addresses": {
          "description": "IP Addresses of the providing service, multiple addresses will be round robin load balanced.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "IP Address of the providing service.",
            "type": "string",
            "format": "ipv4",
            "example": "1.2.3.4"
          }
        },
        "name": {
          "description": "Name of the service.",
          "type": "string",
          "maxLength": 64,
          "x-omitempty": false,
          "example": "ExampleService"
        },
        "network_id": {
          "description": "Network ID of the network that provides this service.",
          "type": "string",
          "format": "uuid"
        },
        "port": {
          "description": "Port exposed by the service.",
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": false,
          "example": 80
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "proxy_protocol": {
          "description": "Proxy protocol v2 enabled for this endpoint.",
          "type": "boolean",
          "default": true
        },
        "require_approval": {
          "description": "Require explicit project approval for the service owner.",
          "type": "boolean",
          "default": true
        },
        "status": {
          "description": "Status of the service.\n\n### Status can be one of\n| Status           | Description                            |\n| ---------------- | -------------------------------------- |\n| AVAILABLE        | Service is ready for consumption.      |\n| PENDING_CREATE   | Service is being set up                |\n| PENDING_UPDATE   | Service is being updated               |\n| PENDING_DELETE   | Service is being deleted               |\n| UNAVAILABLE      | Service is unavailable (e.g. disabled) |\n",
          "type": "string",
          "enum": [
            "AVAILABLE",
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "UNAVAILABLE"
          ],
          "readOnly": true
        },
        "updated_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "visibility": {
          "description": "Set global visibility of the service. For ` + "`" + `private` + "`" + ` visibility, RBAC policies can extend the visibility to specific projects.",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "public"
          ]
        }
      }
    },
    "Timestamp": {
      "description": "The UTC date and timestamp.",
      "type": "object",
      "format": "dateTime",
      "x-go-type": {
        "hints": {
          "noValidation": true
        },
        "type": "time.Time"
      },
      "readOnly": true,
      "example": "2023-03-31T18:37:54.581099Z"
    },
    "Version": {
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "pagination",
            "sort"
          ]
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "updated": {
          "description": "Last update of the running version",
          "type": "string",
          "example": "2018-09-30T00:00:00Z"
        },
        "version": {
          "description": "Version of Archer",
          "type": "string",
          "example": "1.3.0"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "type": "integer",
      "description": "Sets the page size.",
      "name": "limit",
      "in": "query"
    },
    "marker": {
      "type": "string",
      "format": "uuid",
      "description": "Pagination ID of the last item in the previous list.",
      "name": "marker",
      "in": "query"
    },
    "page_reverse": {
      "type": "boolean",
      "description": "Sets the page direction.",
      "name": "page_reverse",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
      "name": "sort",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "X-Auth-Token": {
      "description": "The **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in ` + "`" + `X-Auth-Token` + "`" + ` request header. \nYou obtain the token by authenticating to the Keystone endpoint.\n",
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "X-Auth-Token": []
    },
    {}
  ],
  "tags": [
    {
      "description": "### Version API\nLists information of enabled Archer capabilities.\n",
      "name": "Version"
    },
    {
      "description": "### Services\nServices are for publishing TCP/UDP services using internal IP addresses in your private network.\n",
      "name": "Service"
    },
    {
      "description": "### Endpoints\nEndpoints are for accessing existing Services using internal IP addresses in your private network.\n",
      "name": "Endpoint"
    },
    {
      "description": "### RBAC Policies\nRBAC Policies are used to provide service visibility to specific project or domains.\n",
      "name": "RBAC",
      "x-go-name": "rbac"
    },
    {
      "description": "### Quota Operations\nAdministrative API for listing and setting quotas for services and endpoints.\n",
      "name": "Quota"
    }
  ],
  "externalDocs": {
    "description": "GitHub",
    "url": "https://github.com/sapcc/archer"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Archer is an API service that can privately connect services from one private [OpenStack Network](https://docs.openstack.org/neutron/latest/admin/intro-os-networking.html) to another. Consumers can select a *service* from a service catalog and **inject** it to their network, which means making this *service* available via a private ip address.\n\nArcher implements an *OpenStack* like API and integrates with *OpenStack Keystone* and *OpenStack Neutron*.\n\n### Architecture\nThere are two types of resources: **services** and **endpoints**\n\n* **Services** are private or public services that are manually configured in *Archer*. They can be accessed by creating an endpoint.\n* **Service endpoints**, or short **endpoints**, are IP endpoints in a local network used to transparently access services residing in different private networks.\n\n### Features\n* Multi-tenant capable via OpenStack Identity service\n* OpenStack ` + "`" + `policy.json` + "`" + ` access policy support\n* Prometheus Exporter\n* Rate limiting\n\n### Supported Backends\n* F5 BigIP\n\n### Requirements\n* PostgreSQL Database\n\n### API\nThe **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in ` + "`" + `X-Auth-Token` + "`" + ` request header. \nYou obtain the token by authenticating to the Keystone endpoint.\n\nWhen Keystone is enabled, the ` + "`" + `project_id` + "`" + ` attribute is not required in create requests because the project ID is derived from the authentication token.\n",
    "title": "üèπ Archer",
    "contact": {
      "name": "SAP SE / Converged Cloud",
      "url": "https://sap.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.3.0",
    "x-logo": {
      "altText": "Archer logo",
      "backgroundColor": "#FFFFFF",
      "url": "https://avatars.githubusercontent.com/u/4242847"
    }
  },
  "paths": {
    "/": {
      "get": {
        "security": [],
        "tags": [
          "Version"
        ],
        "summary": "Shows details for Archer API",
        "responses": {
          "200": {
            "description": "Version",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        }
      }
    },
    "/endpoint": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "List existing service endpoints",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of endpoints.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Endpoint"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "endpoint:read"
      },
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Create endpoint for accessing a service",
        "parameters": [
          {
            "description": "Service and target network to inject. Only one of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint",
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "endpoint:create"
      }
    },
    "/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Show existing service endpoint",
        "responses": {
          "200": {
            "description": "An endpoint detail.",
            "schema": {
              "$ref": "#/definitions/Endpoint"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "endpoint:read"
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Remove an existing endpoint",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "endpoint:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the endpoint",
          "name": "endpoint_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/quotas": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "List Quotas",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of quotas",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                },
                "quotas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/QuotasItems0"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:read"
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "query"
        }
      ]
    },
    "/quotas/defaults": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "Show Quota Defaults",
        "responses": {
          "200": {
            "description": "Show the quota defaults configured for new projects.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "quota:read-defaults"
      }
    },
    "/quotas/{project_id}": {
      "get": {
        "tags": [
          "Quota"
        ],
        "summary": "Show Quota detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/Quota"
                    },
                    {
                      "$ref": "#/definitions/QuotaUsage"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:read"
      },
      "put": {
        "tags": [
          "Quota"
        ],
        "summary": "Update Quota",
        "parameters": [
          {
            "name": "quota",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "quota"
              ],
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated quota for a project.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/Quota"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:update"
      },
      "delete": {
        "tags": [
          "Quota"
        ],
        "summary": "Reset all Quota of a project",
        "responses": {
          "204": {
            "description": "Resource successfully reset"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "quota:delete"
      },
      "parameters": [
        {
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/rbac-policies": {
      "get": {
        "tags": [
          "RBAC"
        ],
        "summary": "List RBAC policies",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of rbac policies",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RBACPolicy"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "rbac-policy:read"
      },
      "post": {
        "tags": [
          "RBAC"
        ],
        "summary": "Create RBAC policy",
        "parameters": [
          {
            "description": "RBAC Policy",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RBAC policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:create"
      }
    },
    "/rbac-policies/{rbac_policy_id}": {
      "get": {
        "tags": [
          "RBAC"
        ],
        "summary": "Show details of an RBAC policy",
        "responses": {
          "200": {
            "description": "RBAC Policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicy"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:read"
      },
      "put": {
        "tags": [
          "RBAC"
        ],
        "summary": "Update an existing RBAC policy",
        "parameters": [
          {
            "description": "RBAC policy resource that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RBACPolicyCommon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RBAC Policy",
            "schema": {
              "$ref": "#/definitions/RBACPolicyCommon"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:update"
      },
      "delete": {
        "tags": [
          "RBAC"
        ],
        "summary": "Delete RBAC policy",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "rbac-policy:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the RBAC policy.",
          "name": "rbac_policy_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List services",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of services.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Service"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "x-policy": "service:read"
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Add a new service to the catalog",
        "parameters": [
          {
            "description": "Service object that needs to be added to the catalog",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:create"
      }
    },
    "/service/{service_id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Show details of an service",
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:read"
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing service",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:update"
      },
      "delete": {
        "description": "Deletes this service. There **must** be no active associated endpoint for successfully deleting the service. \nActive endpoints can be rejected by the service owner via the ` + "`" + `/service/{service_id}/reject_endpoints` + "`" + ` API.\n",
        "tags": [
          "Service"
        ],
        "summary": "Remove service from catalog",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "In use.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/accept_endpoints": {
      "put": {
        "description": "Specify a list of endpoint consumers (` + "`" + `endpoint_ids` + "`" + ` and/or ` + "`" + `project_ids` + "`" + `) whose endpoints should be accepted.\n* Existing active endpoints will be untouched.\n* Rejected endpoints will be accepted.\n* Pending endpoints will be accepted.\n",
        "tags": [
          "Service"
        ],
        "summary": "Accept endpoints",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointConsumerList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConsumer"
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service-endpoint:accept"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/endpoints": {
      "get": {
        "description": "Provides a list of service consumers (endpoints).\n\nThis list can be used to accept or reject requests, or disable active endpoints. \nRejected endpoints will be cleaned up after a specific time.\n",
        "tags": [
          "Service"
        ],
        "summary": "List service endpoints consumers",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of service endpoint consumers.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EndpointConsumer"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-policy": "service-endpoint:read"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/service/{service_id}/reject_endpoints": {
      "put": {
        "description": "Specify a list of consumers (` + "`" + `endpoint_ids` + "`" + ` and/or ` + "`" + `project_ids` + "`" + `) whose endpoints should be rejected.\n* Existing active endpoints will be rejected.\n* Rejected endpoints will be untouched.\n* Pending endpoints will be rejected.\n",
        "tags": [
          "Service"
        ],
        "summary": "Reject endpoints",
        "parameters": [
          {
            "description": "Service object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointConsumerList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointConsumer"
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-policy": "service-endpoint:reject"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the service",
          "name": "service_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Endpoint": {
      "type": "object",
      "properties": {
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "service_id": {
          "description": "The ID of the service.",
          "type": "string",
          "format": "uuid"
        },
        "service_name": {
          "description": "The name of the service.",
          "type": "string",
          "readOnly": true,
          "example": "Example Service"
        },
        "status": {
          "$ref": "#/definitions/EndpointStatus"
        },
        "target": {
          "description": "Endpoint target",
          "type": "object",
          "properties": {
            "network": {
              "description": "Endpoint network target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "49b6480b-24d3-4376-a4c9-aecbb89e16d9"
            },
            "port": {
              "description": "Endpoint port target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "b2accf1a-1c99-4b54-9eeb-22be53f177f5"
            },
            "subnet": {
              "description": "Endpoint subnet target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
              "type": "string",
              "format": "uuid",
              "x-nullable": true,
              "example": "1fb12a1a-a1a5-4732-9a2e-635ba6ec8d3b"
            }
          }
        },
        "updated_at": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "EndpointConsumer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/EndpointStatus"
        }
      }
    },
    "EndpointConsumerList": {
      "description": "list of consumer ids.",
      "type": "object",
      "properties": {
        "endpoint_ids": {
          "type": "array",
          "items": {
            "description": "The ID of a service endpoint consumer.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "project_ids": {
          "type": "array",
          "items": {
            "description": "The ID of a project.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        }
      }
    },
    "EndpointStatus": {
      "description": "Status of the endpoint\n\n### Status can be one of\n| Status             | Description                           |\n| ------------------ | ------------------------------------- |\n| AVAILABLE          | Endpoint is active for consumption    |\n| PENDING_APPROVAL   | Endpoint is waiting for approval      |\n| PENDING_CREATE     | Endpoint is being set up              |\n| PENDING_DELETE     | Endpoint is being deleted             |\n| REJECTED           | Endpoint was rejected                 |\n| FAILED             | Endpoint setup failed                 |\n",
      "type": "string",
      "enum": [
        "ACTIVE",
        "PENDING_APPROVAL",
        "PENDING_CREATE",
        "PENDING_DELETE",
        "REJECTED",
        "FAILED"
      ],
      "readOnly": true
    },
    "EndpointTarget": {
      "description": "Endpoint target",
      "type": "object",
      "properties": {
        "network": {
          "description": "Endpoint network target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "49b6480b-24d3-4376-a4c9-aecbb89e16d9"
        },
        "port": {
          "description": "Endpoint port target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "b2accf1a-1c99-4b54-9eeb-22be53f177f5"
        },
        "subnet": {
          "description": "Endpoint subnet target. One of ` + "`" + `target_network` + "`" + `, ` + "`" + `target_subnet` + "`" + ` or ` + "`" + `target_port` + "`" + ` must be specified.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true,
          "example": "1fb12a1a-a1a5-4732-9a2e-635ba6ec8d3b"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "example": "/"
        },
        "rel": {
          "type": "string",
          "example": "self"
        }
      }
    },
    "Project": {
      "description": "The ID of the project owning this resource.",
      "type": "string",
      "maxLength": 32,
      "minLength": 32,
      "x-omitempty": false,
      "example": "fa84c217f361441986a220edf9b1e337"
    },
    "Quota": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The configured endpoint quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "service": {
          "description": "The configured service quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        }
      }
    },
    "QuotaUsage": {
      "type": "object",
      "properties": {
        "in_use_endpoint": {
          "description": "The current quota usage of endpoints.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_service": {
          "description": "The current quota usage of services.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        }
      }
    },
    "QuotasItems0": {
      "allOf": [
        {
          "$ref": "#/definitions/Quota"
        },
        {
          "$ref": "#/definitions/QuotaUsage"
        },
        {
          "type": "object",
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      ]
    },
    "RBACPolicy": {
      "type": "object",
      "required": [
        "service_id"
      ],
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "service_id": {
          "description": "The ID of the service resource.",
          "type": "string",
          "format": "uuid"
        },
        "target": {
          "description": "The ID of the project to which the RBAC policy will be enforced.",
          "type": "string",
          "example": "666da95112694b37b3efb0913de3f499"
        },
        "target_type": {
          "type": "string",
          "enum": [
            "project_id",
            "domain_id"
          ]
        }
      },
      "x-go-name": "rbacpolicy"
    },
    "RBACPolicyCommon": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "target": {
          "description": "The ID of the project to which the RBAC policy will be enforced.",
          "type": "string",
          "example": "666da95112694b37b3efb0913de3f499"
        },
        "target_type": {
          "type": "string",
          "enum": [
            "project_id",
            "domain_id"
          ]
        }
      },
      "x-go-name": "rbacpolicycommon"
    },
    "Service": {
      "type": "object",
      "required": [
        "port",
        "network_id",
        "ip_addresses"
      ],
      "properties": {
        "availability_zone": {
          "description": "Availability zone of this service.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": false,
          "example": "AZ-A"
        },
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "description": {
          "description": "Description of the service.",
          "type": "string",
          "maxLength": 255,
          "x-omitempty": false,
          "example": "An example of an Service."
        },
        "enabled": {
          "description": "Enable/disable this service. Existing endpoints are not touched by this.",
          "type": "boolean"
        },
        "host": {
          "description": "Device host.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The ID of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "ip_addresses": {
          "description": "IP Addresses of the providing service, multiple addresses will be round robin load balanced.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "IP Address of the providing service.",
            "type": "string",
            "format": "ipv4",
            "example": "1.2.3.4"
          }
        },
        "name": {
          "description": "Name of the service.",
          "type": "string",
          "maxLength": 64,
          "x-omitempty": false,
          "example": "ExampleService"
        },
        "network_id": {
          "description": "Network ID of the network that provides this service.",
          "type": "string",
          "format": "uuid"
        },
        "port": {
          "description": "Port exposed by the service.",
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "x-nullable": false,
          "example": 80
        },
        "project_id": {
          "$ref": "#/definitions/Project"
        },
        "proxy_protocol": {
          "description": "Proxy protocol v2 enabled for this endpoint.",
          "type": "boolean",
          "default": true
        },
        "require_approval": {
          "description": "Require explicit project approval for the service owner.",
          "type": "boolean",
          "default": true
        },
        "status": {
          "description": "Status of the service.\n\n### Status can be one of\n| Status           | Description                            |\n| ---------------- | -------------------------------------- |\n| AVAILABLE        | Service is ready for consumption.      |\n| PENDING_CREATE   | Service is being set up                |\n| PENDING_UPDATE   | Service is being updated               |\n| PENDING_DELETE   | Service is being deleted               |\n| UNAVAILABLE      | Service is unavailable (e.g. disabled) |\n",
          "type": "string",
          "enum": [
            "AVAILABLE",
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "UNAVAILABLE"
          ],
          "readOnly": true
        },
        "updated_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "visibility": {
          "description": "Set global visibility of the service. For ` + "`" + `private` + "`" + ` visibility, RBAC policies can extend the visibility to specific projects.",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "public"
          ]
        }
      }
    },
    "Timestamp": {
      "description": "The UTC date and timestamp.",
      "type": "object",
      "format": "dateTime",
      "x-go-type": {
        "hints": {
          "noValidation": true
        },
        "type": "time.Time"
      },
      "readOnly": true,
      "example": "2023-03-31T18:37:54.581099Z"
    },
    "Version": {
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "pagination",
            "sort"
          ]
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "updated": {
          "description": "Last update of the running version",
          "type": "string",
          "example": "2018-09-30T00:00:00Z"
        },
        "version": {
          "description": "Version of Archer",
          "type": "string",
          "example": "1.3.0"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "type": "integer",
      "description": "Sets the page size.",
      "name": "limit",
      "in": "query"
    },
    "marker": {
      "type": "string",
      "format": "uuid",
      "description": "Pagination ID of the last item in the previous list.",
      "name": "marker",
      "in": "query"
    },
    "page_reverse": {
      "type": "boolean",
      "description": "Sets the page direction.",
      "name": "page_reverse",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
      "name": "sort",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "X-Auth-Token": {
      "description": "The **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in ` + "`" + `X-Auth-Token` + "`" + ` request header. \nYou obtain the token by authenticating to the Keystone endpoint.\n",
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "X-Auth-Token": []
    },
    {}
  ],
  "tags": [
    {
      "description": "### Version API\nLists information of enabled Archer capabilities.\n",
      "name": "Version"
    },
    {
      "description": "### Services\nServices are for publishing TCP/UDP services using internal IP addresses in your private network.\n",
      "name": "Service"
    },
    {
      "description": "### Endpoints\nEndpoints are for accessing existing Services using internal IP addresses in your private network.\n",
      "name": "Endpoint"
    },
    {
      "description": "### RBAC Policies\nRBAC Policies are used to provide service visibility to specific project or domains.\n",
      "name": "RBAC",
      "x-go-name": "rbac"
    },
    {
      "description": "### Quota Operations\nAdministrative API for listing and setting quotas for services and endpoints.\n",
      "name": "Quota"
    }
  ],
  "externalDocs": {
    "description": "GitHub",
    "url": "https://github.com/sapcc/archer"
  }
}`))
}
