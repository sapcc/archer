// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetQuotasProjectIDHandlerFunc turns a function with the right signature into a get quotas project ID handler
type GetQuotasProjectIDHandlerFunc func(GetQuotasProjectIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQuotasProjectIDHandlerFunc) Handle(params GetQuotasProjectIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetQuotasProjectIDHandler interface for that can handle valid get quotas project ID params
type GetQuotasProjectIDHandler interface {
	Handle(GetQuotasProjectIDParams, interface{}) middleware.Responder
}

// NewGetQuotasProjectID creates a new http.Handler for the get quotas project ID operation
func NewGetQuotasProjectID(ctx *middleware.Context, handler GetQuotasProjectIDHandler) *GetQuotasProjectID {
	return &GetQuotasProjectID{Context: ctx, Handler: handler}
}

/*
	GetQuotasProjectID swagger:route GET /quotas/{project_id} Quota getQuotasProjectId

Show Quota detail
*/
type GetQuotasProjectID struct {
	Context *middleware.Context
	Handler GetQuotasProjectIDHandler
}

func (o *GetQuotasProjectID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetQuotasProjectIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetQuotasProjectIDOKBody get quotas project ID o k body
//
// swagger:model GetQuotasProjectIDOKBody
type GetQuotasProjectIDOKBody struct {

	// quota
	Quota struct {
		models.Quota

		models.QuotaUsage
	} `json:"quota,omitempty"`
}

// Validate validates this get quotas project ID o k body
func (o *GetQuotasProjectIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasProjectIDOKBody) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(o.Quota) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this get quotas project ID o k body based on the context it is used
func (o *GetQuotasProjectIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasProjectIDOKBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasProjectIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasProjectIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasProjectIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
