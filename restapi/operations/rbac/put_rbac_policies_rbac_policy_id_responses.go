// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/archer/models"
)

// PutRbacPoliciesRbacPolicyIDOKCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDOK
const PutRbacPoliciesRbacPolicyIDOKCode int = 200

/*
PutRbacPoliciesRbacPolicyIDOK RBAC Policy

swagger:response putRbacPoliciesRbacPolicyIdOK
*/
type PutRbacPoliciesRbacPolicyIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Rbacpolicy `json:"body,omitempty"`
}

// NewPutRbacPoliciesRbacPolicyIDOK creates PutRbacPoliciesRbacPolicyIDOK with default headers values
func NewPutRbacPoliciesRbacPolicyIDOK() *PutRbacPoliciesRbacPolicyIDOK {

	return &PutRbacPoliciesRbacPolicyIDOK{}
}

// WithPayload adds the payload to the put rbac policies rbac policy Id o k response
func (o *PutRbacPoliciesRbacPolicyIDOK) WithPayload(payload *models.Rbacpolicy) *PutRbacPoliciesRbacPolicyIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put rbac policies rbac policy Id o k response
func (o *PutRbacPoliciesRbacPolicyIDOK) SetPayload(payload *models.Rbacpolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRbacPoliciesRbacPolicyIDUnauthorizedCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDUnauthorized
const PutRbacPoliciesRbacPolicyIDUnauthorizedCode int = 401

/*
PutRbacPoliciesRbacPolicyIDUnauthorized Unauthorized

swagger:response putRbacPoliciesRbacPolicyIdUnauthorized
*/
type PutRbacPoliciesRbacPolicyIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutRbacPoliciesRbacPolicyIDUnauthorized creates PutRbacPoliciesRbacPolicyIDUnauthorized with default headers values
func NewPutRbacPoliciesRbacPolicyIDUnauthorized() *PutRbacPoliciesRbacPolicyIDUnauthorized {

	return &PutRbacPoliciesRbacPolicyIDUnauthorized{}
}

// WithPayload adds the payload to the put rbac policies rbac policy Id unauthorized response
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) WithPayload(payload *models.Error) *PutRbacPoliciesRbacPolicyIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put rbac policies rbac policy Id unauthorized response
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRbacPoliciesRbacPolicyIDForbiddenCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDForbidden
const PutRbacPoliciesRbacPolicyIDForbiddenCode int = 403

/*
PutRbacPoliciesRbacPolicyIDForbidden Forbidden

swagger:response putRbacPoliciesRbacPolicyIdForbidden
*/
type PutRbacPoliciesRbacPolicyIDForbidden struct {
}

// NewPutRbacPoliciesRbacPolicyIDForbidden creates PutRbacPoliciesRbacPolicyIDForbidden with default headers values
func NewPutRbacPoliciesRbacPolicyIDForbidden() *PutRbacPoliciesRbacPolicyIDForbidden {

	return &PutRbacPoliciesRbacPolicyIDForbidden{}
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PutRbacPoliciesRbacPolicyIDNotFoundCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDNotFound
const PutRbacPoliciesRbacPolicyIDNotFoundCode int = 404

/*
PutRbacPoliciesRbacPolicyIDNotFound Not Found

swagger:response putRbacPoliciesRbacPolicyIdNotFound
*/
type PutRbacPoliciesRbacPolicyIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutRbacPoliciesRbacPolicyIDNotFound creates PutRbacPoliciesRbacPolicyIDNotFound with default headers values
func NewPutRbacPoliciesRbacPolicyIDNotFound() *PutRbacPoliciesRbacPolicyIDNotFound {

	return &PutRbacPoliciesRbacPolicyIDNotFound{}
}

// WithPayload adds the payload to the put rbac policies rbac policy Id not found response
func (o *PutRbacPoliciesRbacPolicyIDNotFound) WithPayload(payload *models.Error) *PutRbacPoliciesRbacPolicyIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put rbac policies rbac policy Id not found response
func (o *PutRbacPoliciesRbacPolicyIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRbacPoliciesRbacPolicyIDConflictCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDConflict
const PutRbacPoliciesRbacPolicyIDConflictCode int = 409

/*
PutRbacPoliciesRbacPolicyIDConflict Duplicate RBAC Policy

swagger:response putRbacPoliciesRbacPolicyIdConflict
*/
type PutRbacPoliciesRbacPolicyIDConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutRbacPoliciesRbacPolicyIDConflict creates PutRbacPoliciesRbacPolicyIDConflict with default headers values
func NewPutRbacPoliciesRbacPolicyIDConflict() *PutRbacPoliciesRbacPolicyIDConflict {

	return &PutRbacPoliciesRbacPolicyIDConflict{}
}

// WithPayload adds the payload to the put rbac policies rbac policy Id conflict response
func (o *PutRbacPoliciesRbacPolicyIDConflict) WithPayload(payload *models.Error) *PutRbacPoliciesRbacPolicyIDConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put rbac policies rbac policy Id conflict response
func (o *PutRbacPoliciesRbacPolicyIDConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRbacPoliciesRbacPolicyIDUnprocessableEntityCode is the HTTP code returned for type PutRbacPoliciesRbacPolicyIDUnprocessableEntity
const PutRbacPoliciesRbacPolicyIDUnprocessableEntityCode int = 422

/*
PutRbacPoliciesRbacPolicyIDUnprocessableEntity Unprocessable Content

swagger:response putRbacPoliciesRbacPolicyIdUnprocessableEntity
*/
type PutRbacPoliciesRbacPolicyIDUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutRbacPoliciesRbacPolicyIDUnprocessableEntity creates PutRbacPoliciesRbacPolicyIDUnprocessableEntity with default headers values
func NewPutRbacPoliciesRbacPolicyIDUnprocessableEntity() *PutRbacPoliciesRbacPolicyIDUnprocessableEntity {

	return &PutRbacPoliciesRbacPolicyIDUnprocessableEntity{}
}

// WithPayload adds the payload to the put rbac policies rbac policy Id unprocessable entity response
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) WithPayload(payload *models.Error) *PutRbacPoliciesRbacPolicyIDUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put rbac policies rbac policy Id unprocessable entity response
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
