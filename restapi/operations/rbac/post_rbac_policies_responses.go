// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/archer/models"
)

// PostRbacPoliciesOKCode is the HTTP code returned for type PostRbacPoliciesOK
const PostRbacPoliciesOKCode int = 200

/*
PostRbacPoliciesOK RBAC policy

swagger:response postRbacPoliciesOK
*/
type PostRbacPoliciesOK struct {

	/*
	  In: Body
	*/
	Payload *models.Rbacpolicy `json:"body,omitempty"`
}

// NewPostRbacPoliciesOK creates PostRbacPoliciesOK with default headers values
func NewPostRbacPoliciesOK() *PostRbacPoliciesOK {

	return &PostRbacPoliciesOK{}
}

// WithPayload adds the payload to the post rbac policies o k response
func (o *PostRbacPoliciesOK) WithPayload(payload *models.Rbacpolicy) *PostRbacPoliciesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post rbac policies o k response
func (o *PostRbacPoliciesOK) SetPayload(payload *models.Rbacpolicy) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRbacPoliciesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRbacPoliciesForbiddenCode is the HTTP code returned for type PostRbacPoliciesForbidden
const PostRbacPoliciesForbiddenCode int = 403

/*
PostRbacPoliciesForbidden Forbidden

swagger:response postRbacPoliciesForbidden
*/
type PostRbacPoliciesForbidden struct {
}

// NewPostRbacPoliciesForbidden creates PostRbacPoliciesForbidden with default headers values
func NewPostRbacPoliciesForbidden() *PostRbacPoliciesForbidden {

	return &PostRbacPoliciesForbidden{}
}

// WriteResponse to the client
func (o *PostRbacPoliciesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostRbacPoliciesNotFoundCode is the HTTP code returned for type PostRbacPoliciesNotFound
const PostRbacPoliciesNotFoundCode int = 404

/*
PostRbacPoliciesNotFound service_id not found

swagger:response postRbacPoliciesNotFound
*/
type PostRbacPoliciesNotFound struct {
}

// NewPostRbacPoliciesNotFound creates PostRbacPoliciesNotFound with default headers values
func NewPostRbacPoliciesNotFound() *PostRbacPoliciesNotFound {

	return &PostRbacPoliciesNotFound{}
}

// WriteResponse to the client
func (o *PostRbacPoliciesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// PostRbacPoliciesConflictCode is the HTTP code returned for type PostRbacPoliciesConflict
const PostRbacPoliciesConflictCode int = 409

/*
PostRbacPoliciesConflict Duplicate RBAC Policy

swagger:response postRbacPoliciesConflict
*/
type PostRbacPoliciesConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRbacPoliciesConflict creates PostRbacPoliciesConflict with default headers values
func NewPostRbacPoliciesConflict() *PostRbacPoliciesConflict {

	return &PostRbacPoliciesConflict{}
}

// WithPayload adds the payload to the post rbac policies conflict response
func (o *PostRbacPoliciesConflict) WithPayload(payload *models.Error) *PostRbacPoliciesConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post rbac policies conflict response
func (o *PostRbacPoliciesConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRbacPoliciesConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
