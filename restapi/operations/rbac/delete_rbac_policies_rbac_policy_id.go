// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteRbacPoliciesRbacPolicyIDHandlerFunc turns a function with the right signature into a delete rbac policies rbac policy ID handler
type DeleteRbacPoliciesRbacPolicyIDHandlerFunc func(DeleteRbacPoliciesRbacPolicyIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRbacPoliciesRbacPolicyIDHandlerFunc) Handle(params DeleteRbacPoliciesRbacPolicyIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteRbacPoliciesRbacPolicyIDHandler interface for that can handle valid delete rbac policies rbac policy ID params
type DeleteRbacPoliciesRbacPolicyIDHandler interface {
	Handle(DeleteRbacPoliciesRbacPolicyIDParams, interface{}) middleware.Responder
}

// NewDeleteRbacPoliciesRbacPolicyID creates a new http.Handler for the delete rbac policies rbac policy ID operation
func NewDeleteRbacPoliciesRbacPolicyID(ctx *middleware.Context, handler DeleteRbacPoliciesRbacPolicyIDHandler) *DeleteRbacPoliciesRbacPolicyID {
	return &DeleteRbacPoliciesRbacPolicyID{Context: ctx, Handler: handler}
}

/*
	DeleteRbacPoliciesRbacPolicyID swagger:route DELETE /rbac-policies/{rbac_policy_id} RBAC deleteRbacPoliciesRbacPolicyId

Delete RBAC policy
*/
type DeleteRbacPoliciesRbacPolicyID struct {
	Context *middleware.Context
	Handler DeleteRbacPoliciesRbacPolicyIDHandler
}

func (o *DeleteRbacPoliciesRbacPolicyID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteRbacPoliciesRbacPolicyIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
