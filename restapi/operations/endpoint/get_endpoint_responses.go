// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/archer/models"
)

// GetEndpointOKCode is the HTTP code returned for type GetEndpointOK
const GetEndpointOKCode int = 200

/*
GetEndpointOK An array of endpoints.

swagger:response getEndpointOK
*/
type GetEndpointOK struct {

	/*
	  In: Body
	*/
	Payload *GetEndpointOKBody `json:"body,omitempty"`
}

// NewGetEndpointOK creates GetEndpointOK with default headers values
func NewGetEndpointOK() *GetEndpointOK {

	return &GetEndpointOK{}
}

// WithPayload adds the payload to the get endpoint o k response
func (o *GetEndpointOK) WithPayload(payload *GetEndpointOKBody) *GetEndpointOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get endpoint o k response
func (o *GetEndpointOK) SetPayload(payload *GetEndpointOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEndpointOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEndpointBadRequestCode is the HTTP code returned for type GetEndpointBadRequest
const GetEndpointBadRequestCode int = 400

/*
GetEndpointBadRequest Bad request

swagger:response getEndpointBadRequest
*/
type GetEndpointBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEndpointBadRequest creates GetEndpointBadRequest with default headers values
func NewGetEndpointBadRequest() *GetEndpointBadRequest {

	return &GetEndpointBadRequest{}
}

// WithPayload adds the payload to the get endpoint bad request response
func (o *GetEndpointBadRequest) WithPayload(payload *models.Error) *GetEndpointBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get endpoint bad request response
func (o *GetEndpointBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEndpointBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEndpointUnauthorizedCode is the HTTP code returned for type GetEndpointUnauthorized
const GetEndpointUnauthorizedCode int = 401

/*
GetEndpointUnauthorized Unauthorized

swagger:response getEndpointUnauthorized
*/
type GetEndpointUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEndpointUnauthorized creates GetEndpointUnauthorized with default headers values
func NewGetEndpointUnauthorized() *GetEndpointUnauthorized {

	return &GetEndpointUnauthorized{}
}

// WithPayload adds the payload to the get endpoint unauthorized response
func (o *GetEndpointUnauthorized) WithPayload(payload *models.Error) *GetEndpointUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get endpoint unauthorized response
func (o *GetEndpointUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEndpointUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEndpointForbiddenCode is the HTTP code returned for type GetEndpointForbidden
const GetEndpointForbiddenCode int = 403

/*
GetEndpointForbidden Forbidden

swagger:response getEndpointForbidden
*/
type GetEndpointForbidden struct {
}

// NewGetEndpointForbidden creates GetEndpointForbidden with default headers values
func NewGetEndpointForbidden() *GetEndpointForbidden {

	return &GetEndpointForbidden{}
}

// WriteResponse to the client
func (o *GetEndpointForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// GetEndpointUnprocessableEntityCode is the HTTP code returned for type GetEndpointUnprocessableEntity
const GetEndpointUnprocessableEntityCode int = 422

/*
GetEndpointUnprocessableEntity Unprocessable Content

swagger:response getEndpointUnprocessableEntity
*/
type GetEndpointUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEndpointUnprocessableEntity creates GetEndpointUnprocessableEntity with default headers values
func NewGetEndpointUnprocessableEntity() *GetEndpointUnprocessableEntity {

	return &GetEndpointUnprocessableEntity{}
}

// WithPayload adds the payload to the get endpoint unprocessable entity response
func (o *GetEndpointUnprocessableEntity) WithPayload(payload *models.Error) *GetEndpointUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get endpoint unprocessable entity response
func (o *GetEndpointUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEndpointUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
