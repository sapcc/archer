// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetEndpointURL generates an URL for the get endpoint operation
type GetEndpointURL struct {
	Limit       *int64
	Marker      *strfmt.UUID
	NotTags     []string
	NotTagsAny  []string
	PageReverse *bool
	ProjectID   *string
	Sort        *string
	Tags        []string
	TagsAny     []string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetEndpointURL) WithBasePath(bp string) *GetEndpointURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetEndpointURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetEndpointURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/endpoint"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt64(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var markerQ string
	if o.Marker != nil {
		markerQ = o.Marker.String()
	}
	if markerQ != "" {
		qs.Set("marker", markerQ)
	}

	var notTagsIR []string
	for _, notTagsI := range o.NotTags {
		notTagsIS := notTagsI
		if notTagsIS != "" {
			notTagsIR = append(notTagsIR, notTagsIS)
		}
	}

	notTags := swag.JoinByFormat(notTagsIR, "")

	if len(notTags) > 0 {
		qsv := notTags[0]
		if qsv != "" {
			qs.Set("not-tags", qsv)
		}
	}

	var notTagsAnyIR []string
	for _, notTagsAnyI := range o.NotTagsAny {
		notTagsAnyIS := notTagsAnyI
		if notTagsAnyIS != "" {
			notTagsAnyIR = append(notTagsAnyIR, notTagsAnyIS)
		}
	}

	notTagsAny := swag.JoinByFormat(notTagsAnyIR, "")

	if len(notTagsAny) > 0 {
		qsv := notTagsAny[0]
		if qsv != "" {
			qs.Set("not-tags-any", qsv)
		}
	}

	var pageReverseQ string
	if o.PageReverse != nil {
		pageReverseQ = swag.FormatBool(*o.PageReverse)
	}
	if pageReverseQ != "" {
		qs.Set("page_reverse", pageReverseQ)
	}

	var projectIDQ string
	if o.ProjectID != nil {
		projectIDQ = *o.ProjectID
	}
	if projectIDQ != "" {
		qs.Set("project_id", projectIDQ)
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	var tagsIR []string
	for _, tagsI := range o.Tags {
		tagsIS := tagsI
		if tagsIS != "" {
			tagsIR = append(tagsIR, tagsIS)
		}
	}

	tags := swag.JoinByFormat(tagsIR, "")

	if len(tags) > 0 {
		qsv := tags[0]
		if qsv != "" {
			qs.Set("tags", qsv)
		}
	}

	var tagsAnyIR []string
	for _, tagsAnyI := range o.TagsAny {
		tagsAnyIS := tagsAnyI
		if tagsAnyIS != "" {
			tagsAnyIR = append(tagsAnyIR, tagsAnyIS)
		}
	}

	tagsAny := swag.JoinByFormat(tagsAnyIR, "")

	if len(tagsAny) > 0 {
		qsv := tagsAny[0]
		if qsv != "" {
			qs.Set("tags-any", qsv)
		}
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetEndpointURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetEndpointURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetEndpointURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetEndpointURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetEndpointURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetEndpointURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
