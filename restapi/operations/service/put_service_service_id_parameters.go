// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/sapcc/archer/models"
)

// NewPutServiceServiceIDParams creates a new PutServiceServiceIDParams object
//
// There are no default values defined in the spec.
func NewPutServiceServiceIDParams() PutServiceServiceIDParams {

	return PutServiceServiceIDParams{}
}

// PutServiceServiceIDParams contains all the bound params for the put service service ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutServiceServiceID
type PutServiceServiceIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Service object that needs to be updated
	  Required: true
	  In: body
	*/
	Body *models.ServiceUpdatable
	/*The UUID of the service
	  Required: true
	  In: path
	*/
	ServiceID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutServiceServiceIDParams() beforehand.
func (o *PutServiceServiceIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ServiceUpdatable
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	rServiceID, rhkServiceID, _ := route.Params.GetOK("service_id")
	if err := o.bindServiceID(rServiceID, rhkServiceID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindServiceID binds and validates parameter ServiceID from path.
func (o *PutServiceServiceIDParams) bindServiceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("service_id", "path", "strfmt.UUID", raw)
	}
	o.ServiceID = *(value.(*strfmt.UUID))

	if err := o.validateServiceID(formats); err != nil {
		return err
	}

	return nil
}

// validateServiceID carries on validations for parameter ServiceID
func (o *PutServiceServiceIDParams) validateServiceID(formats strfmt.Registry) error {

	if err := validate.FormatOf("service_id", "path", "uuid", o.ServiceID.String(), formats); err != nil {
		return err
	}
	return nil
}
