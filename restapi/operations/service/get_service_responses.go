// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/archer/models"
)

// GetServiceOKCode is the HTTP code returned for type GetServiceOK
const GetServiceOKCode int = 200

/*
GetServiceOK An array of services.

swagger:response getServiceOK
*/
type GetServiceOK struct {

	/*
	  In: Body
	*/
	Payload *GetServiceOKBody `json:"body,omitempty"`
}

// NewGetServiceOK creates GetServiceOK with default headers values
func NewGetServiceOK() *GetServiceOK {

	return &GetServiceOK{}
}

// WithPayload adds the payload to the get service o k response
func (o *GetServiceOK) WithPayload(payload *GetServiceOKBody) *GetServiceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service o k response
func (o *GetServiceOK) SetPayload(payload *GetServiceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceBadRequestCode is the HTTP code returned for type GetServiceBadRequest
const GetServiceBadRequestCode int = 400

/*
GetServiceBadRequest Bad request

swagger:response getServiceBadRequest
*/
type GetServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceBadRequest creates GetServiceBadRequest with default headers values
func NewGetServiceBadRequest() *GetServiceBadRequest {

	return &GetServiceBadRequest{}
}

// WithPayload adds the payload to the get service bad request response
func (o *GetServiceBadRequest) WithPayload(payload *models.Error) *GetServiceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service bad request response
func (o *GetServiceBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceUnauthorizedCode is the HTTP code returned for type GetServiceUnauthorized
const GetServiceUnauthorizedCode int = 401

/*
GetServiceUnauthorized Unauthorized

swagger:response getServiceUnauthorized
*/
type GetServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceUnauthorized creates GetServiceUnauthorized with default headers values
func NewGetServiceUnauthorized() *GetServiceUnauthorized {

	return &GetServiceUnauthorized{}
}

// WithPayload adds the payload to the get service unauthorized response
func (o *GetServiceUnauthorized) WithPayload(payload *models.Error) *GetServiceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service unauthorized response
func (o *GetServiceUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceForbiddenCode is the HTTP code returned for type GetServiceForbidden
const GetServiceForbiddenCode int = 403

/*
GetServiceForbidden Forbidden

swagger:response getServiceForbidden
*/
type GetServiceForbidden struct {
}

// NewGetServiceForbidden creates GetServiceForbidden with default headers values
func NewGetServiceForbidden() *GetServiceForbidden {

	return &GetServiceForbidden{}
}

// WriteResponse to the client
func (o *GetServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// GetServiceUnprocessableEntityCode is the HTTP code returned for type GetServiceUnprocessableEntity
const GetServiceUnprocessableEntityCode int = 422

/*
GetServiceUnprocessableEntity Unprocessable Content

swagger:response getServiceUnprocessableEntity
*/
type GetServiceUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceUnprocessableEntity creates GetServiceUnprocessableEntity with default headers values
func NewGetServiceUnprocessableEntity() *GetServiceUnprocessableEntity {

	return &GetServiceUnprocessableEntity{}
}

// WithPayload adds the payload to the get service unprocessable entity response
func (o *GetServiceUnprocessableEntity) WithPayload(payload *models.Error) *GetServiceUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service unprocessable entity response
func (o *GetServiceUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
