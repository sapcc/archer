// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/archer/models"
)

// PutServiceServiceIDOKCode is the HTTP code returned for type PutServiceServiceIDOK
const PutServiceServiceIDOKCode int = 200

/*
PutServiceServiceIDOK Service

swagger:response putServiceServiceIdOK
*/
type PutServiceServiceIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Service `json:"body,omitempty"`
}

// NewPutServiceServiceIDOK creates PutServiceServiceIDOK with default headers values
func NewPutServiceServiceIDOK() *PutServiceServiceIDOK {

	return &PutServiceServiceIDOK{}
}

// WithPayload adds the payload to the put service service Id o k response
func (o *PutServiceServiceIDOK) WithPayload(payload *models.Service) *PutServiceServiceIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put service service Id o k response
func (o *PutServiceServiceIDOK) SetPayload(payload *models.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutServiceServiceIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutServiceServiceIDUnauthorizedCode is the HTTP code returned for type PutServiceServiceIDUnauthorized
const PutServiceServiceIDUnauthorizedCode int = 401

/*
PutServiceServiceIDUnauthorized Unauthorized

swagger:response putServiceServiceIdUnauthorized
*/
type PutServiceServiceIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutServiceServiceIDUnauthorized creates PutServiceServiceIDUnauthorized with default headers values
func NewPutServiceServiceIDUnauthorized() *PutServiceServiceIDUnauthorized {

	return &PutServiceServiceIDUnauthorized{}
}

// WithPayload adds the payload to the put service service Id unauthorized response
func (o *PutServiceServiceIDUnauthorized) WithPayload(payload *models.Error) *PutServiceServiceIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put service service Id unauthorized response
func (o *PutServiceServiceIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutServiceServiceIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutServiceServiceIDForbiddenCode is the HTTP code returned for type PutServiceServiceIDForbidden
const PutServiceServiceIDForbiddenCode int = 403

/*
PutServiceServiceIDForbidden Forbidden

swagger:response putServiceServiceIdForbidden
*/
type PutServiceServiceIDForbidden struct {
}

// NewPutServiceServiceIDForbidden creates PutServiceServiceIDForbidden with default headers values
func NewPutServiceServiceIDForbidden() *PutServiceServiceIDForbidden {

	return &PutServiceServiceIDForbidden{}
}

// WriteResponse to the client
func (o *PutServiceServiceIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PutServiceServiceIDNotFoundCode is the HTTP code returned for type PutServiceServiceIDNotFound
const PutServiceServiceIDNotFoundCode int = 404

/*
PutServiceServiceIDNotFound Not Found

swagger:response putServiceServiceIdNotFound
*/
type PutServiceServiceIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutServiceServiceIDNotFound creates PutServiceServiceIDNotFound with default headers values
func NewPutServiceServiceIDNotFound() *PutServiceServiceIDNotFound {

	return &PutServiceServiceIDNotFound{}
}

// WithPayload adds the payload to the put service service Id not found response
func (o *PutServiceServiceIDNotFound) WithPayload(payload *models.Error) *PutServiceServiceIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put service service Id not found response
func (o *PutServiceServiceIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutServiceServiceIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutServiceServiceIDConflictCode is the HTTP code returned for type PutServiceServiceIDConflict
const PutServiceServiceIDConflictCode int = 409

/*
PutServiceServiceIDConflict Duplicate entry

swagger:response putServiceServiceIdConflict
*/
type PutServiceServiceIDConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutServiceServiceIDConflict creates PutServiceServiceIDConflict with default headers values
func NewPutServiceServiceIDConflict() *PutServiceServiceIDConflict {

	return &PutServiceServiceIDConflict{}
}

// WithPayload adds the payload to the put service service Id conflict response
func (o *PutServiceServiceIDConflict) WithPayload(payload *models.Error) *PutServiceServiceIDConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put service service Id conflict response
func (o *PutServiceServiceIDConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutServiceServiceIDConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutServiceServiceIDUnprocessableEntityCode is the HTTP code returned for type PutServiceServiceIDUnprocessableEntity
const PutServiceServiceIDUnprocessableEntityCode int = 422

/*
PutServiceServiceIDUnprocessableEntity Unprocessable Content

swagger:response putServiceServiceIdUnprocessableEntity
*/
type PutServiceServiceIDUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutServiceServiceIDUnprocessableEntity creates PutServiceServiceIDUnprocessableEntity with default headers values
func NewPutServiceServiceIDUnprocessableEntity() *PutServiceServiceIDUnprocessableEntity {

	return &PutServiceServiceIDUnprocessableEntity{}
}

// WithPayload adds the payload to the put service service Id unprocessable entity response
func (o *PutServiceServiceIDUnprocessableEntity) WithPayload(payload *models.Error) *PutServiceServiceIDUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put service service Id unprocessable entity response
func (o *PutServiceServiceIDUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutServiceServiceIDUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
