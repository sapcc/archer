swagger: "2.0"
info:
  version: "1.3.0"
  title: "üèπ Archer"
  contact:
    name: SAP SE / Converged Cloud
    url: https://sap.com
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://avatars.githubusercontent.com/u/4242847"
    backgroundColor: "#FFFFFF"
    altText: "Archer logo"
  description: |
    Archer is an API service that can privately connect services from one private [OpenStack Network](https://docs.openstack.org/neutron/latest/admin/intro-os-networking.html) to another. Consumers can select a *service* from a service catalog and **inject** it to their network, which means making this *service* available via a private ip address.
    
    Archer implements an *OpenStack* like API and integrates with *OpenStack Keystone* and *OpenStack Neutron*.
    
    ### Architecture
    There are two types of resources: **services** and **endpoints**
    
    * **Services** are private or public services that are manually configured in *Archer*. They can be accessed by creating an endpoint.
    * **Service endpoints**, or short **endpoints**, are IP endpoints in a local network used to transparently access services residing in different private networks.
    
    ### Features
    * Multi-tenant capable via OpenStack Identity service
    * OpenStack `policy.json` access policy support
    * Prometheus Exporter
    * Rate limiting
    
    ### Supported Backends
    * F5 BigIP
    
    ### Requirements
    * PostgreSQL Database
    
    ### API
    The **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in `X-Auth-Token` request header. 
    You obtain the token by authenticating to the Keystone endpoint.

    When Keystone is enabled, the `project_id` attribute is not required in create requests because the project ID is derived from the authentication token.
externalDocs:
  description: GitHub
  url: https://github.com/sapcc/archer
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Version
    description: |
      ### Version API
      Lists information of enabled Archer capabilities.
  - name: Service
    description: |
      ### Services
      Services are for publishing TCP/UDP services using internal IP addresses in your private network.
  - name: Endpoint
    description: |
      ### Endpoints
      Endpoints are for accessing existing Services using internal IP addresses in your private network.
  - name: RBAC
    x-go-name: rbac
    description: |
      ### RBAC Policies
      RBAC Policies are used to provide service visibility to specific project or domains.
  - name: Quota
    description: |
      ### Quota Operations
      Administrative API for listing and setting quotas for services and endpoints.
schemes:
  - "https"
  - "http"
security:
  - "X-Auth-Token": []
securityDefinitions:
  "X-Auth-Token":
    type: "apiKey"
    description: |
      The **Archer API** uses the OpenStack Identity service as the default authentication service. When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication token in `X-Auth-Token` request header. 
      You obtain the token by authenticating to the Keystone endpoint.
    name: "X-Auth-Token"
    in: "header"
paths:
  /:
    get:
      security: []
      tags:
        - Version
      summary: Shows details for Archer API
      responses:
        200:
          description: Version
          schema:
            $ref: "#/definitions/Version"
  /service:
    get:
      tags:
        - Service
      summary: List services
      responses:
        200:
          description: An array of services.
          schema:
            type: array
            items:
              $ref: "#/definitions/Service"
    post:
      tags:
        - Service
      summary: Add a new service to the catalog
      parameters:
        - in: body
          name: body
          description: Service object that needs to be added to the catalog
          required: true
          schema:
            $ref: "#/definitions/Service"
      responses:
        200:
          description: Service
          schema:
            $ref: "#/definitions/Service"
        400:
          description: Validation Error
  /service/{service_id}:
    parameters:
      - in: path
        name: service_id
        required: true
        type: string
        format: uuid
        description: The UUID of the service
    get:
      tags:
        - Service
      summary: Show details of an service
      responses:
        200:
          description: Service
          schema:
            $ref: "#/definitions/Service"
        400:
          description: Validation Error
        404:
          description: Not Found
    put:
      tags:
        - Service
      summary: Update an existing service
      parameters:
        - in: body
          name: body
          description: Service object that needs to be updated
          required: true
          schema:
            $ref: "#/definitions/Service"
      responses:
        200:
          description: Service
          schema:
            $ref: "#/definitions/Service"
        400:
          description: Validation Error
        404:
          description: Not Found
    delete:
      tags:
        - Service
      summary: Remove service from catalog
      description: |
        Deletes this service. There **must** be no active associated endpoint for successfully deleting the service. 
        Active endpoints can be rejected by the service owner via the `/service/{service_id}/reject_endpoints` API.
      responses:
        204:
          description: Resource successfully deleted.
        404:
          description: Not Found
        409:
          description: In use.
  /service/{service_id}/endpoints:
    parameters:
      - in: path
        name: service_id
        required: true
        type: string
        format: uuid
        description: The UUID of the service
    get:
      tags:
        - Service
      summary: List service endpoints consumers
      description: |
        Provides a list of service consumers (endpoints).
        
        This list can be used to accept or reject requests, or disable active endpoints. 
        Rejected endpoints will be cleaned up after a specific time.
      responses:
        200:
          description: An array of service endpoint consumers.
          schema:
            type: array
            items:
              $ref: "#/definitions/EndpointConsumer"
        404:
          description: Not Found
  /service/{service_id}/accept_endpoints:
    parameters:
      - in: path
        name: service_id
        required: true
        type: string
        format: uuid
        description: The UUID of the service
    put:
      summary: Accept endpoints
      description: |
        Specify a list of endpoint consumers (`endpoint_ids` and/or `project_ids`) whose endpoints should be accepted.
        * Existing active endpoints will be untouched.
        * Rejected endpoints will be accepted.
        * Pending endpoints will be accepted.
      tags:
        - Service
      parameters:
        - in: body
          name: body
          description: Service object that needs to be updated
          required: true
          schema:
            $ref: "#/definitions/EndpointConsumerList"
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: "#/definitions/EndpointConsumer"
        400:
          description: Validation Error
        404:
          description: Not Found
  /service/{service_id}/reject_endpoints:
    parameters:
      - in: path
        name: service_id
        required: true
        type: string
        format: uuid
        description: The UUID of the service
    put:
      summary: Reject endpoints
      description: |
        Specify a list of consumers (`endpoint_ids` and/or `project_ids`) whose endpoints should be rejected.
        * Existing active endpoints will be rejected.
        * Rejected endpoints will be untouched.
        * Pending endpoints will be rejected.
      tags:
        - Service
      parameters:
        - in: body
          name: body
          description: Service object that needs to be updated
          required: true
          schema:
            $ref: "#/definitions/EndpointConsumerList"
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: "#/definitions/EndpointConsumer"
        400:
          description: Validation Error
        404:
          description: Not Found

  /endpoint:
    get:
      tags:
        - Endpoint
      summary: List existing service endpoints
      responses:
        200:
          description: An array of endpoints.
          schema:
            type: array
            items:
              $ref: "#/definitions/Endpoint"
    post:
      tags:
        - Endpoint
      summary: Create endpoint for accessing a service
      parameters:
        - in: body
          name: body
          description: Service and target network to inject. Only one of `target_network`, `target_subnet` or `target_port` must be specified.
          required: true
          schema:
            $ref: "#/definitions/Endpoint"
      responses:
        200:
          description: Endpoint
          schema:
            $ref: "#/definitions/Endpoint"
        400:
          description: Validation Error
  /endpoint/{endpoint_id}:
    parameters:
      - in: path
        name: endpoint_id
        required: true
        type: string
        format: uuid
        description: The UUID of the endpoint
    get:
      tags:
        - Endpoint
      summary: Show existing service endpoint
      responses:
        200:
          description: An endpoint detail.
          schema:
            $ref: "#/definitions/Endpoint"
        404:
          description: Not Found
    delete:
      tags:
        - Endpoint
      summary: Remove an existing endpoint
      responses:
        204:
          description: Resource successfully deleted.
        404:
          description: Not Found
  /rbac-policies:
    get:
      tags:
        - RBAC
      summary: List RBAC policies
      responses:
        200:
          description: A JSON array of rbac policies
          schema:
            type: array
            items:
              $ref: "#/definitions/RBACPolicy"
        default:
          description: Unexpected Error
    post:
      tags:
        - RBAC
      summary: Create RBAC policy
      parameters:
        - in: body
          name: body
          description: RBAC Policy
          required: true
          schema:
            $ref: "#/definitions/RBACPolicy"
      responses:
        200:
          description: RBAC policy
          schema:
            $ref: '#/definitions/RBACPolicy'
        400:
          description: Validation Error
        409:
          description: Exists
  /rbac-policies/{rbac_policy_id}:
    parameters:
      - in: path
        name: rbac_policy_id
        required: true
        type: string
        format: uuid
        description: The UUID of the RBAC policy.
    get:
      tags:
        - RBAC
      summary: Show details of an RBAC policy
      responses:
        200:
          description: RBAC Policy
          schema:
            $ref: '#/definitions/RBACPolicy'
        404:
          description: Not Found
    put:
      tags:
        - RBAC
      summary: Update an existing RBAC policy
      parameters:
        - in: body
          name: body
          description: RBAC policy resource that needs to be updated
          required: true
          schema:
            $ref: "#/definitions/RBACPolicyCommon"
      responses:
        200:
          description: RBAC Policy
          schema:
            $ref: "#/definitions/RBACPolicyCommon"
        400:
          description: Validation Error
        404:
          description: Not Found
    delete:
      tags:
        - RBAC
      summary: Delete RBAC policy
      responses:
        204:
          description: Resource successfully deleted.
        404:
          description: Not Found
  /quotas:
    parameters:
      - in: query
        name: project_id
        type: string
        description: The ID of the project to query.
        minLength: 32
        maxLength: 32
    get:
      tags:
        - Quota
      summary: List Quotas
      responses:
        200:
          description: A JSON array of quotas
          schema:
            type: object
            properties:
              quotas:
                type: array
                items:
                  allOf:
                    - $ref: '#/definitions/Quota'
                    - $ref: '#/definitions/QuotaUsage'
                    - type: object
                      properties:
                        project_id:
                          $ref: "#/definitions/Project"
        404:
          description: Not Found
  /quotas/defaults:
    get:
      tags:
        - Quota
      summary: Show Quota Defaults
      responses:
        200:
          description: Show the quota defaults configured for new projects.
          schema:
            type: object
            properties:
              quota:
                $ref: '#/definitions/Quota'
  /quotas/{project_id}:
    parameters:
      - in: path
        name: project_id
        required: true
        type: string
        description: The ID of the project to query.
    get:
      tags:
        - Quota
      summary: Show Quota detail
      responses:
        200:
          description: Shows the details of a specific monitor.
          schema:
            type: object
            properties:
              quota:
                allOf:
                  - $ref: '#/definitions/Quota'
                  - $ref: '#/definitions/QuotaUsage'
        404:
          description: Not Found
    put:
      tags:
        - Quota
      summary: Update Quota
      parameters:
        - in: body
          name: quota
          required: true
          schema:
            type: object
            required:
              - quota
            properties:
              quota:
                $ref: '#/definitions/Quota'
      responses:
        202:
          description: Updated quota for a project.
          schema:
            type: object
            properties:
              quota:
                $ref: '#/definitions/Quota'
        400:
          description: Validation Error
        404:
          description: Not found
    delete:
      tags:
        - Quota
      summary: Reset all Quota of a project
      responses:
        204:
          description: Resource successfully reset
        404:
          description: Not Found
definitions:
  Service:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The ID of the resource.
        readOnly: true
      enabled:
        type: boolean
        description: Enable/disable this service. Existing endpoints are not touched by this.
      name:
        type: string
        description: Name of the service.
        example: ExampleService
      description:
        type: string
        description: Description of the service.
        example: An example of an Service.
      ports:
        type: array
        description: Ports exposed by the service.
        example: [80, 443]
        items:
          type: integer
          description: Port of the service.
      network_id:
        type: string
        format: uuid
        description: Network ID of the network that provides this service.
      ip_address:
        type: string
        format: ipv4
        description: IP Address of the providing service.
        example: 1.2.3.4
      status:
        type: string
        description: |
          Status of the service.
          
          ### Status can be one of
          | Status           | Description                            |
          | ---------------- | -------------------------------------- |
          | AVAILABLE        | Service is ready for consumption.      |
          | PENDING_CREATE   | Service is being set up                |
          | PENDING_UPDATE   | Service is being updated               |
          | PENDING_DELETE   | Service is being deleted               |
          | UNAVAILABLE      | Service is unavailable (e.g. disabled) |
        enum:
          - AVAILABLE
          - PENDING_CREATE
          - PENDING_UPDATE
          - PENDING_DELETE
          - UNAVAILABLE
        readOnly: true
      require_approval:
        type: boolean
        description: Require explicit project approval for the service owner.
        default: true
      visibility:
        type: string
        description: Set global visibility of the service. For `private` visibility, RBAC policies can extend the visibility to specific projects.
        default: private
        enum:
          - private
          - public
      availability_zone:
        type: string
        description: Availability zone of this service.
        x-nullable: true
        example: AZ-A
      project_id:
        $ref: "#/definitions/Project"
  EndpointConsumer:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The ID of the resource.
        readOnly: true
      status:
        $ref: "#/definitions/EndpointStatus"
  EndpointConsumerList:
    type: object
    description: list of consumer ids.
    properties:
      endpoint_ids:
        type: array
        items:
          type: string
          format: uuid
          description: The ID of a service endpoint consumer.
          readOnly: true
      project_ids:
        type: array
        items:
          type: string
          format: uuid
          description: The ID of a project.
          readOnly: true
  Endpoint:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The ID of the resource.
        readOnly: true
      service_id:
        type: string
        format: uuid
        description: The ID of the service.
      service_name:
        type: string
        example: Example Service
        description: The name of the service.
        readOnly: true
      target_network:
        type: string
        format: uuid
        description: Endpoint network target. One of `target_network`, `target_subnet` or `target_port` must be specified.
        example: null
      target_subnet:
        type: string
        format: uuid
        description: Endpoint subnet target. One of `target_network`, `target_subnet` or `target_port` must be specified.
        example: null
      target_port:
        type: string
        format: uuid
        description: Endpoint port target. One of `target_network`, `target_subnet` or `target_port` must be specified.
        example: b2accf1a-1c99-4b54-9eeb-22be53f177f5
      proxy_protocol:
        type: boolean
        description: Proxy protocol enabled for this endpoint.
      status:
        $ref: "#/definitions/EndpointStatus"
      project_id:
        $ref: "#/definitions/Project"
  EndpointStatus:
    type: string
    description: |
      Status of the endpoint
      
      ### Status can be one of
      | Status             | Description                           |
      | ------------------ | ------------------------------------- |
      | AVAILABLE          | Endpoint is active for consumption    |
      | PENDING_APPROVAL   | Endpoint is waiting for approval      |
      | PENDING_CREATE     | Endpoint is being set up              |
      | PENDING_DELETE     | Endpoint is being deleted             |
      | REJECTED           | Endpoint was rejected                 |
      | FAILED             | Endpoint setup failed                 |
    enum:
      - ACTIVE
      - PENDING_APPROVAL
      - PENDING_CREATE
      - PENDING_DELETE
      - REJECTED
      - FAILED
    readOnly: true
  RBACPolicyCommon:
    x-go-name: rbacpolicycommon
    required:
      - target
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The ID of the resource.
        readOnly: true
      target_type:
        type: string
        enum:
          - project_id
          - domain_id
      target:
        description: The ID of the project to which the RBAC policy will be enforced.
        type: string
        example: 666da95112694b37b3efb0913de3f499
      project_id:
        $ref: "#/definitions/Project"
  RBACPolicy:
    x-go-name: rbacpolicy
    required:
      - service_id
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: The ID of the resource.
        readOnly: true
      target_type:
        type: string
        enum:
          - project_id
          - domain_id
      target:
        description: The ID of the project to which the RBAC policy will be enforced.
        type: string
        example: 666da95112694b37b3efb0913de3f499
      service_id:
        type: string
        format: uuid
        description: The ID of the service resource.
      project_id:
        $ref: "#/definitions/Project"
  Quota:
    type: object
    properties:
      service:
        type: integer
        description: The configured service quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.
        example: 5
        x-nullable: true
      endpoint:
        type: integer
        description: The configured endpoint quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.
        example: 5
        x-nullable: true
  Project:
    type: string
    description: The ID of the project owning this resource.
    example: fa84c217f361441986a220edf9b1e337
    minLength: 32
    maxLength: 32
  QuotaUsage:
    type: object
    properties:
      in_use_service:
        type: integer
        description: The current quota usage of services.
        example: 5
        x-omitempty: false
      in_use_endpoint:
        type: integer
        description: The current quota usage of endpoints.
        example: 5
        x-omitempty: false
  Version:
    type: object
    properties:
      updated:
        type: string
        description: Last update of the running version
        example: "2018-09-30T00:00:00Z"
      version:
        type: string
        description: Version of Archer
        example: 1.3.0
      links:
        type: array
        items:
          type: object
          properties:
            href:
              type: string
              example: https://example.com
            type:
              type: string
              example: application/json
            rel:
              type: string
              example: self
      capabilities:
        type: array
        example: ["pagination", "sort"]
        items:
          type: string
