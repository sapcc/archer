// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package f5

import (
	"github.com/sapcc/archer/internal/agent/f5/as3"
	mock "github.com/stretchr/testify/mock"
)

// NewMockF5Device creates a new instance of MockF5Device. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockF5Device(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockF5Device {
	mock := &MockF5Device{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockF5Device is an autogenerated mock type for the F5Device type
type MockF5Device struct {
	mock.Mock
}

type MockF5Device_Expecter struct {
	mock *mock.Mock
}

func (_m *MockF5Device) EXPECT() *MockF5Device_Expecter {
	return &MockF5Device_Expecter{mock: &_m.Mock}
}

// DeleteGuestVLAN provides a mock function for the type MockF5Device
func (_mock *MockF5Device) DeleteGuestVLAN(segmentId int) error {
	ret := _mock.Called(segmentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGuestVLAN")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_DeleteGuestVLAN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGuestVLAN'
type MockF5Device_DeleteGuestVLAN_Call struct {
	*mock.Call
}

// DeleteGuestVLAN is a helper method to define mock.On call
//   - segmentId int
func (_e *MockF5Device_Expecter) DeleteGuestVLAN(segmentId interface{}) *MockF5Device_DeleteGuestVLAN_Call {
	return &MockF5Device_DeleteGuestVLAN_Call{Call: _e.mock.On("DeleteGuestVLAN", segmentId)}
}

func (_c *MockF5Device_DeleteGuestVLAN_Call) Run(run func(segmentId int)) *MockF5Device_DeleteGuestVLAN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_DeleteGuestVLAN_Call) Return(err error) *MockF5Device_DeleteGuestVLAN_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_DeleteGuestVLAN_Call) RunAndReturn(run func(segmentId int) error) *MockF5Device_DeleteGuestVLAN_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRouteDomain provides a mock function for the type MockF5Device
func (_mock *MockF5Device) DeleteRouteDomain(segmentId int) error {
	ret := _mock.Called(segmentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteDomain")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_DeleteRouteDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRouteDomain'
type MockF5Device_DeleteRouteDomain_Call struct {
	*mock.Call
}

// DeleteRouteDomain is a helper method to define mock.On call
//   - segmentId int
func (_e *MockF5Device_Expecter) DeleteRouteDomain(segmentId interface{}) *MockF5Device_DeleteRouteDomain_Call {
	return &MockF5Device_DeleteRouteDomain_Call{Call: _e.mock.On("DeleteRouteDomain", segmentId)}
}

func (_c *MockF5Device_DeleteRouteDomain_Call) Run(run func(segmentId int)) *MockF5Device_DeleteRouteDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_DeleteRouteDomain_Call) Return(err error) *MockF5Device_DeleteRouteDomain_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_DeleteRouteDomain_Call) RunAndReturn(run func(segmentId int) error) *MockF5Device_DeleteRouteDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSelfIP provides a mock function for the type MockF5Device
func (_mock *MockF5Device) DeleteSelfIP(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSelfIP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_DeleteSelfIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSelfIP'
type MockF5Device_DeleteSelfIP_Call struct {
	*mock.Call
}

// DeleteSelfIP is a helper method to define mock.On call
//   - name string
func (_e *MockF5Device_Expecter) DeleteSelfIP(name interface{}) *MockF5Device_DeleteSelfIP_Call {
	return &MockF5Device_DeleteSelfIP_Call{Call: _e.mock.On("DeleteSelfIP", name)}
}

func (_c *MockF5Device_DeleteSelfIP_Call) Run(run func(name string)) *MockF5Device_DeleteSelfIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_DeleteSelfIP_Call) Return(err error) *MockF5Device_DeleteSelfIP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_DeleteSelfIP_Call) RunAndReturn(run func(name string) error) *MockF5Device_DeleteSelfIP_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVLAN provides a mock function for the type MockF5Device
func (_mock *MockF5Device) DeleteVLAN(segmentId int) error {
	ret := _mock.Called(segmentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVLAN")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_DeleteVLAN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVLAN'
type MockF5Device_DeleteVLAN_Call struct {
	*mock.Call
}

// DeleteVLAN is a helper method to define mock.On call
//   - segmentId int
func (_e *MockF5Device_Expecter) DeleteVLAN(segmentId interface{}) *MockF5Device_DeleteVLAN_Call {
	return &MockF5Device_DeleteVLAN_Call{Call: _e.mock.On("DeleteVLAN", segmentId)}
}

func (_c *MockF5Device_DeleteVLAN_Call) Run(run func(segmentId int)) *MockF5Device_DeleteVLAN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_DeleteVLAN_Call) Return(err error) *MockF5Device_DeleteVLAN_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_DeleteVLAN_Call) RunAndReturn(run func(segmentId int) error) *MockF5Device_DeleteVLAN_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureBigIPSelfIP provides a mock function for the type MockF5Device
func (_mock *MockF5Device) EnsureBigIPSelfIP(name string, address string, segmentId int) error {
	ret := _mock.Called(name, address, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for EnsureBigIPSelfIP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = returnFunc(name, address, segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_EnsureBigIPSelfIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureBigIPSelfIP'
type MockF5Device_EnsureBigIPSelfIP_Call struct {
	*mock.Call
}

// EnsureBigIPSelfIP is a helper method to define mock.On call
//   - name string
//   - address string
//   - segmentId int
func (_e *MockF5Device_Expecter) EnsureBigIPSelfIP(name interface{}, address interface{}, segmentId interface{}) *MockF5Device_EnsureBigIPSelfIP_Call {
	return &MockF5Device_EnsureBigIPSelfIP_Call{Call: _e.mock.On("EnsureBigIPSelfIP", name, address, segmentId)}
}

func (_c *MockF5Device_EnsureBigIPSelfIP_Call) Run(run func(name string, address string, segmentId int)) *MockF5Device_EnsureBigIPSelfIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockF5Device_EnsureBigIPSelfIP_Call) Return(err error) *MockF5Device_EnsureBigIPSelfIP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_EnsureBigIPSelfIP_Call) RunAndReturn(run func(name string, address string, segmentId int) error) *MockF5Device_EnsureBigIPSelfIP_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureGuestVlan provides a mock function for the type MockF5Device
func (_mock *MockF5Device) EnsureGuestVlan(segmentId int) error {
	ret := _mock.Called(segmentId)

	if len(ret) == 0 {
		panic("no return value specified for EnsureGuestVlan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_EnsureGuestVlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureGuestVlan'
type MockF5Device_EnsureGuestVlan_Call struct {
	*mock.Call
}

// EnsureGuestVlan is a helper method to define mock.On call
//   - segmentId int
func (_e *MockF5Device_Expecter) EnsureGuestVlan(segmentId interface{}) *MockF5Device_EnsureGuestVlan_Call {
	return &MockF5Device_EnsureGuestVlan_Call{Call: _e.mock.On("EnsureGuestVlan", segmentId)}
}

func (_c *MockF5Device_EnsureGuestVlan_Call) Run(run func(segmentId int)) *MockF5Device_EnsureGuestVlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_EnsureGuestVlan_Call) Return(err error) *MockF5Device_EnsureGuestVlan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_EnsureGuestVlan_Call) RunAndReturn(run func(segmentId int) error) *MockF5Device_EnsureGuestVlan_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureInterfaceVlan provides a mock function for the type MockF5Device
func (_mock *MockF5Device) EnsureInterfaceVlan(segmentId int) error {
	ret := _mock.Called(segmentId)

	if len(ret) == 0 {
		panic("no return value specified for EnsureInterfaceVlan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(segmentId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_EnsureInterfaceVlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureInterfaceVlan'
type MockF5Device_EnsureInterfaceVlan_Call struct {
	*mock.Call
}

// EnsureInterfaceVlan is a helper method to define mock.On call
//   - segmentId int
func (_e *MockF5Device_Expecter) EnsureInterfaceVlan(segmentId interface{}) *MockF5Device_EnsureInterfaceVlan_Call {
	return &MockF5Device_EnsureInterfaceVlan_Call{Call: _e.mock.On("EnsureInterfaceVlan", segmentId)}
}

func (_c *MockF5Device_EnsureInterfaceVlan_Call) Run(run func(segmentId int)) *MockF5Device_EnsureInterfaceVlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_EnsureInterfaceVlan_Call) Return(err error) *MockF5Device_EnsureInterfaceVlan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_EnsureInterfaceVlan_Call) RunAndReturn(run func(segmentId int) error) *MockF5Device_EnsureInterfaceVlan_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureRouteDomain provides a mock function for the type MockF5Device
func (_mock *MockF5Device) EnsureRouteDomain(segmentId int, parentSegmentID *int) error {
	ret := _mock.Called(segmentId, parentSegmentID)

	if len(ret) == 0 {
		panic("no return value specified for EnsureRouteDomain")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, *int) error); ok {
		r0 = returnFunc(segmentId, parentSegmentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_EnsureRouteDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureRouteDomain'
type MockF5Device_EnsureRouteDomain_Call struct {
	*mock.Call
}

// EnsureRouteDomain is a helper method to define mock.On call
//   - segmentId int
//   - parentSegmentID *int
func (_e *MockF5Device_Expecter) EnsureRouteDomain(segmentId interface{}, parentSegmentID interface{}) *MockF5Device_EnsureRouteDomain_Call {
	return &MockF5Device_EnsureRouteDomain_Call{Call: _e.mock.On("EnsureRouteDomain", segmentId, parentSegmentID)}
}

func (_c *MockF5Device_EnsureRouteDomain_Call) Run(run func(segmentId int, parentSegmentID *int)) *MockF5Device_EnsureRouteDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 *int
		if args[1] != nil {
			arg1 = args[1].(*int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockF5Device_EnsureRouteDomain_Call) Return(err error) *MockF5Device_EnsureRouteDomain_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_EnsureRouteDomain_Call) RunAndReturn(run func(segmentId int, parentSegmentID *int) error) *MockF5Device_EnsureRouteDomain_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureVLAN provides a mock function for the type MockF5Device
func (_mock *MockF5Device) EnsureVLAN(segmentId int, mtu int) error {
	ret := _mock.Called(segmentId, mtu)

	if len(ret) == 0 {
		panic("no return value specified for EnsureVLAN")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = returnFunc(segmentId, mtu)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_EnsureVLAN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureVLAN'
type MockF5Device_EnsureVLAN_Call struct {
	*mock.Call
}

// EnsureVLAN is a helper method to define mock.On call
//   - segmentId int
//   - mtu int
func (_e *MockF5Device_Expecter) EnsureVLAN(segmentId interface{}, mtu interface{}) *MockF5Device_EnsureVLAN_Call {
	return &MockF5Device_EnsureVLAN_Call{Call: _e.mock.On("EnsureVLAN", segmentId, mtu)}
}

func (_c *MockF5Device_EnsureVLAN_Call) Run(run func(segmentId int, mtu int)) *MockF5Device_EnsureVLAN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockF5Device_EnsureVLAN_Call) Return(err error) *MockF5Device_EnsureVLAN_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_EnsureVLAN_Call) RunAndReturn(run func(segmentId int, mtu int) error) *MockF5Device_EnsureVLAN_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceType provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetDeviceType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockF5Device_GetDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceType'
type MockF5Device_GetDeviceType_Call struct {
	*mock.Call
}

// GetDeviceType is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetDeviceType() *MockF5Device_GetDeviceType_Call {
	return &MockF5Device_GetDeviceType_Call{Call: _e.mock.On("GetDeviceType")}
}

func (_c *MockF5Device_GetDeviceType_Call) Run(run func()) *MockF5Device_GetDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetDeviceType_Call) Return(s string) *MockF5Device_GetDeviceType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockF5Device_GetDeviceType_Call) RunAndReturn(run func() string) *MockF5Device_GetDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// GetFailoverState provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetFailoverState() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFailoverState")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockF5Device_GetFailoverState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailoverState'
type MockF5Device_GetFailoverState_Call struct {
	*mock.Call
}

// GetFailoverState is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetFailoverState() *MockF5Device_GetFailoverState_Call {
	return &MockF5Device_GetFailoverState_Call{Call: _e.mock.On("GetFailoverState")}
}

func (_c *MockF5Device_GetFailoverState_Call) Run(run func()) *MockF5Device_GetFailoverState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetFailoverState_Call) Return(s string) *MockF5Device_GetFailoverState_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockF5Device_GetFailoverState_Call) RunAndReturn(run func() string) *MockF5Device_GetFailoverState_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostname provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetHostname() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHostname")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockF5Device_GetHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostname'
type MockF5Device_GetHostname_Call struct {
	*mock.Call
}

// GetHostname is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetHostname() *MockF5Device_GetHostname_Call {
	return &MockF5Device_GetHostname_Call{Call: _e.mock.On("GetHostname")}
}

func (_c *MockF5Device_GetHostname_Call) Run(run func()) *MockF5Device_GetHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetHostname_Call) Return(s string) *MockF5Device_GetHostname_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockF5Device_GetHostname_Call) RunAndReturn(run func() string) *MockF5Device_GetHostname_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartitions provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetPartitions() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPartitions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockF5Device_GetPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartitions'
type MockF5Device_GetPartitions_Call struct {
	*mock.Call
}

// GetPartitions is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetPartitions() *MockF5Device_GetPartitions_Call {
	return &MockF5Device_GetPartitions_Call{Call: _e.mock.On("GetPartitions")}
}

func (_c *MockF5Device_GetPartitions_Call) Run(run func()) *MockF5Device_GetPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetPartitions_Call) Return(strings []string, err error) *MockF5Device_GetPartitions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockF5Device_GetPartitions_Call) RunAndReturn(run func() ([]string, error)) *MockF5Device_GetPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteDomains provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetRouteDomains() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRouteDomains")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockF5Device_GetRouteDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteDomains'
type MockF5Device_GetRouteDomains_Call struct {
	*mock.Call
}

// GetRouteDomains is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetRouteDomains() *MockF5Device_GetRouteDomains_Call {
	return &MockF5Device_GetRouteDomains_Call{Call: _e.mock.On("GetRouteDomains")}
}

func (_c *MockF5Device_GetRouteDomains_Call) Run(run func()) *MockF5Device_GetRouteDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetRouteDomains_Call) Return(strings []string, err error) *MockF5Device_GetRouteDomains_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockF5Device_GetRouteDomains_Call) RunAndReturn(run func() ([]string, error)) *MockF5Device_GetRouteDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfIPs provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetSelfIPs() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelfIPs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockF5Device_GetSelfIPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfIPs'
type MockF5Device_GetSelfIPs_Call struct {
	*mock.Call
}

// GetSelfIPs is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetSelfIPs() *MockF5Device_GetSelfIPs_Call {
	return &MockF5Device_GetSelfIPs_Call{Call: _e.mock.On("GetSelfIPs")}
}

func (_c *MockF5Device_GetSelfIPs_Call) Run(run func()) *MockF5Device_GetSelfIPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetSelfIPs_Call) Return(strings []string, err error) *MockF5Device_GetSelfIPs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockF5Device_GetSelfIPs_Call) RunAndReturn(run func() ([]string, error)) *MockF5Device_GetSelfIPs_Call {
	_c.Call.Return(run)
	return _c
}

// GetVLANs provides a mock function for the type MockF5Device
func (_mock *MockF5Device) GetVLANs() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVLANs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockF5Device_GetVLANs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVLANs'
type MockF5Device_GetVLANs_Call struct {
	*mock.Call
}

// GetVLANs is a helper method to define mock.On call
func (_e *MockF5Device_Expecter) GetVLANs() *MockF5Device_GetVLANs_Call {
	return &MockF5Device_GetVLANs_Call{Call: _e.mock.On("GetVLANs")}
}

func (_c *MockF5Device_GetVLANs_Call) Run(run func()) *MockF5Device_GetVLANs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockF5Device_GetVLANs_Call) Return(strings []string, err error) *MockF5Device_GetVLANs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockF5Device_GetVLANs_Call) RunAndReturn(run func() ([]string, error)) *MockF5Device_GetVLANs_Call {
	_c.Call.Return(run)
	return _c
}

// PostAS3 provides a mock function for the type MockF5Device
func (_mock *MockF5Device) PostAS3(as31 *as3.AS3, tenant string) error {
	ret := _mock.Called(as31, tenant)

	if len(ret) == 0 {
		panic("no return value specified for PostAS3")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*as3.AS3, string) error); ok {
		r0 = returnFunc(as31, tenant)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_PostAS3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAS3'
type MockF5Device_PostAS3_Call struct {
	*mock.Call
}

// PostAS3 is a helper method to define mock.On call
//   - as31 *as3.AS3
//   - tenant string
func (_e *MockF5Device_Expecter) PostAS3(as31 interface{}, tenant interface{}) *MockF5Device_PostAS3_Call {
	return &MockF5Device_PostAS3_Call{Call: _e.mock.On("PostAS3", as31, tenant)}
}

func (_c *MockF5Device_PostAS3_Call) Run(run func(as31 *as3.AS3, tenant string)) *MockF5Device_PostAS3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *as3.AS3
		if args[0] != nil {
			arg0 = args[0].(*as3.AS3)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockF5Device_PostAS3_Call) Return(err error) *MockF5Device_PostAS3_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_PostAS3_Call) RunAndReturn(run func(as31 *as3.AS3, tenant string) error) *MockF5Device_PostAS3_Call {
	_c.Call.Return(run)
	return _c
}

// SyncGuestVLANs provides a mock function for the type MockF5Device
func (_mock *MockF5Device) SyncGuestVLANs(usedSegments map[int]string) error {
	ret := _mock.Called(usedSegments)

	if len(ret) == 0 {
		panic("no return value specified for SyncGuestVLANs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[int]string) error); ok {
		r0 = returnFunc(usedSegments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockF5Device_SyncGuestVLANs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncGuestVLANs'
type MockF5Device_SyncGuestVLANs_Call struct {
	*mock.Call
}

// SyncGuestVLANs is a helper method to define mock.On call
//   - usedSegments map[int]string
func (_e *MockF5Device_Expecter) SyncGuestVLANs(usedSegments interface{}) *MockF5Device_SyncGuestVLANs_Call {
	return &MockF5Device_SyncGuestVLANs_Call{Call: _e.mock.On("SyncGuestVLANs", usedSegments)}
}

func (_c *MockF5Device_SyncGuestVLANs_Call) Run(run func(usedSegments map[int]string)) *MockF5Device_SyncGuestVLANs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[int]string
		if args[0] != nil {
			arg0 = args[0].(map[int]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockF5Device_SyncGuestVLANs_Call) Return(err error) *MockF5Device_SyncGuestVLANs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockF5Device_SyncGuestVLANs_Call) RunAndReturn(run func(usedSegments map[int]string) error) *MockF5Device_SyncGuestVLANs_Call {
	_c.Call.Return(run)
	return _c
}
