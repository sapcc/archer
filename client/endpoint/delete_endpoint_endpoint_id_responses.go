// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// DeleteEndpointEndpointIDReader is a Reader for the DeleteEndpointEndpointID structure.
type DeleteEndpointEndpointIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteEndpointEndpointIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteEndpointEndpointIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteEndpointEndpointIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteEndpointEndpointIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteEndpointEndpointIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewDeleteEndpointEndpointIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteEndpointEndpointIDAccepted creates a DeleteEndpointEndpointIDAccepted with default headers values
func NewDeleteEndpointEndpointIDAccepted() *DeleteEndpointEndpointIDAccepted {
	return &DeleteEndpointEndpointIDAccepted{}
}

/*
DeleteEndpointEndpointIDAccepted describes a response with status code 202, with default header values.

Delete request successfully accepted.
*/
type DeleteEndpointEndpointIDAccepted struct {
}

// IsSuccess returns true when this delete endpoint endpoint Id accepted response has a 2xx status code
func (o *DeleteEndpointEndpointIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete endpoint endpoint Id accepted response has a 3xx status code
func (o *DeleteEndpointEndpointIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete endpoint endpoint Id accepted response has a 4xx status code
func (o *DeleteEndpointEndpointIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete endpoint endpoint Id accepted response has a 5xx status code
func (o *DeleteEndpointEndpointIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete endpoint endpoint Id accepted response a status code equal to that given
func (o *DeleteEndpointEndpointIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete endpoint endpoint Id accepted response
func (o *DeleteEndpointEndpointIDAccepted) Code() int {
	return 202
}

func (o *DeleteEndpointEndpointIDAccepted) Error() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdAccepted ", 202)
}

func (o *DeleteEndpointEndpointIDAccepted) String() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdAccepted ", 202)
}

func (o *DeleteEndpointEndpointIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEndpointEndpointIDUnauthorized creates a DeleteEndpointEndpointIDUnauthorized with default headers values
func NewDeleteEndpointEndpointIDUnauthorized() *DeleteEndpointEndpointIDUnauthorized {
	return &DeleteEndpointEndpointIDUnauthorized{}
}

/*
DeleteEndpointEndpointIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteEndpointEndpointIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete endpoint endpoint Id unauthorized response has a 2xx status code
func (o *DeleteEndpointEndpointIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete endpoint endpoint Id unauthorized response has a 3xx status code
func (o *DeleteEndpointEndpointIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete endpoint endpoint Id unauthorized response has a 4xx status code
func (o *DeleteEndpointEndpointIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete endpoint endpoint Id unauthorized response has a 5xx status code
func (o *DeleteEndpointEndpointIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete endpoint endpoint Id unauthorized response a status code equal to that given
func (o *DeleteEndpointEndpointIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete endpoint endpoint Id unauthorized response
func (o *DeleteEndpointEndpointIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteEndpointEndpointIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteEndpointEndpointIDUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteEndpointEndpointIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteEndpointEndpointIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEndpointEndpointIDForbidden creates a DeleteEndpointEndpointIDForbidden with default headers values
func NewDeleteEndpointEndpointIDForbidden() *DeleteEndpointEndpointIDForbidden {
	return &DeleteEndpointEndpointIDForbidden{}
}

/*
DeleteEndpointEndpointIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteEndpointEndpointIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete endpoint endpoint Id forbidden response has a 2xx status code
func (o *DeleteEndpointEndpointIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete endpoint endpoint Id forbidden response has a 3xx status code
func (o *DeleteEndpointEndpointIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete endpoint endpoint Id forbidden response has a 4xx status code
func (o *DeleteEndpointEndpointIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete endpoint endpoint Id forbidden response has a 5xx status code
func (o *DeleteEndpointEndpointIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete endpoint endpoint Id forbidden response a status code equal to that given
func (o *DeleteEndpointEndpointIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete endpoint endpoint Id forbidden response
func (o *DeleteEndpointEndpointIDForbidden) Code() int {
	return 403
}

func (o *DeleteEndpointEndpointIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEndpointEndpointIDForbidden) String() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEndpointEndpointIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteEndpointEndpointIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEndpointEndpointIDNotFound creates a DeleteEndpointEndpointIDNotFound with default headers values
func NewDeleteEndpointEndpointIDNotFound() *DeleteEndpointEndpointIDNotFound {
	return &DeleteEndpointEndpointIDNotFound{}
}

/*
DeleteEndpointEndpointIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteEndpointEndpointIDNotFound struct {
}

// IsSuccess returns true when this delete endpoint endpoint Id not found response has a 2xx status code
func (o *DeleteEndpointEndpointIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete endpoint endpoint Id not found response has a 3xx status code
func (o *DeleteEndpointEndpointIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete endpoint endpoint Id not found response has a 4xx status code
func (o *DeleteEndpointEndpointIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete endpoint endpoint Id not found response has a 5xx status code
func (o *DeleteEndpointEndpointIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete endpoint endpoint Id not found response a status code equal to that given
func (o *DeleteEndpointEndpointIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete endpoint endpoint Id not found response
func (o *DeleteEndpointEndpointIDNotFound) Code() int {
	return 404
}

func (o *DeleteEndpointEndpointIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdNotFound ", 404)
}

func (o *DeleteEndpointEndpointIDNotFound) String() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdNotFound ", 404)
}

func (o *DeleteEndpointEndpointIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEndpointEndpointIDUnprocessableEntity creates a DeleteEndpointEndpointIDUnprocessableEntity with default headers values
func NewDeleteEndpointEndpointIDUnprocessableEntity() *DeleteEndpointEndpointIDUnprocessableEntity {
	return &DeleteEndpointEndpointIDUnprocessableEntity{}
}

/*
DeleteEndpointEndpointIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type DeleteEndpointEndpointIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete endpoint endpoint Id unprocessable entity response has a 2xx status code
func (o *DeleteEndpointEndpointIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete endpoint endpoint Id unprocessable entity response has a 3xx status code
func (o *DeleteEndpointEndpointIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete endpoint endpoint Id unprocessable entity response has a 4xx status code
func (o *DeleteEndpointEndpointIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete endpoint endpoint Id unprocessable entity response has a 5xx status code
func (o *DeleteEndpointEndpointIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this delete endpoint endpoint Id unprocessable entity response a status code equal to that given
func (o *DeleteEndpointEndpointIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the delete endpoint endpoint Id unprocessable entity response
func (o *DeleteEndpointEndpointIDUnprocessableEntity) Code() int {
	return 422
}

func (o *DeleteEndpointEndpointIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *DeleteEndpointEndpointIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[DELETE /endpoint/{endpoint_id}][%d] deleteEndpointEndpointIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *DeleteEndpointEndpointIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteEndpointEndpointIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
