// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/archer/models"
)

// PutEndpointEndpointIDReader is a Reader for the PutEndpointEndpointID structure.
type PutEndpointEndpointIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutEndpointEndpointIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutEndpointEndpointIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutEndpointEndpointIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutEndpointEndpointIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutEndpointEndpointIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPutEndpointEndpointIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutEndpointEndpointIDOK creates a PutEndpointEndpointIDOK with default headers values
func NewPutEndpointEndpointIDOK() *PutEndpointEndpointIDOK {
	return &PutEndpointEndpointIDOK{}
}

/*
PutEndpointEndpointIDOK describes a response with status code 200, with default header values.

Endpoint
*/
type PutEndpointEndpointIDOK struct {
	Payload *models.Endpoint
}

// IsSuccess returns true when this put endpoint endpoint Id o k response has a 2xx status code
func (o *PutEndpointEndpointIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put endpoint endpoint Id o k response has a 3xx status code
func (o *PutEndpointEndpointIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put endpoint endpoint Id o k response has a 4xx status code
func (o *PutEndpointEndpointIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put endpoint endpoint Id o k response has a 5xx status code
func (o *PutEndpointEndpointIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put endpoint endpoint Id o k response a status code equal to that given
func (o *PutEndpointEndpointIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put endpoint endpoint Id o k response
func (o *PutEndpointEndpointIDOK) Code() int {
	return 200
}

func (o *PutEndpointEndpointIDOK) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdOK  %+v", 200, o.Payload)
}

func (o *PutEndpointEndpointIDOK) String() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdOK  %+v", 200, o.Payload)
}

func (o *PutEndpointEndpointIDOK) GetPayload() *models.Endpoint {
	return o.Payload
}

func (o *PutEndpointEndpointIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEndpointEndpointIDUnauthorized creates a PutEndpointEndpointIDUnauthorized with default headers values
func NewPutEndpointEndpointIDUnauthorized() *PutEndpointEndpointIDUnauthorized {
	return &PutEndpointEndpointIDUnauthorized{}
}

/*
PutEndpointEndpointIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutEndpointEndpointIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this put endpoint endpoint Id unauthorized response has a 2xx status code
func (o *PutEndpointEndpointIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put endpoint endpoint Id unauthorized response has a 3xx status code
func (o *PutEndpointEndpointIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put endpoint endpoint Id unauthorized response has a 4xx status code
func (o *PutEndpointEndpointIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put endpoint endpoint Id unauthorized response has a 5xx status code
func (o *PutEndpointEndpointIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put endpoint endpoint Id unauthorized response a status code equal to that given
func (o *PutEndpointEndpointIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put endpoint endpoint Id unauthorized response
func (o *PutEndpointEndpointIDUnauthorized) Code() int {
	return 401
}

func (o *PutEndpointEndpointIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutEndpointEndpointIDUnauthorized) String() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutEndpointEndpointIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutEndpointEndpointIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEndpointEndpointIDForbidden creates a PutEndpointEndpointIDForbidden with default headers values
func NewPutEndpointEndpointIDForbidden() *PutEndpointEndpointIDForbidden {
	return &PutEndpointEndpointIDForbidden{}
}

/*
PutEndpointEndpointIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutEndpointEndpointIDForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this put endpoint endpoint Id forbidden response has a 2xx status code
func (o *PutEndpointEndpointIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put endpoint endpoint Id forbidden response has a 3xx status code
func (o *PutEndpointEndpointIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put endpoint endpoint Id forbidden response has a 4xx status code
func (o *PutEndpointEndpointIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put endpoint endpoint Id forbidden response has a 5xx status code
func (o *PutEndpointEndpointIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put endpoint endpoint Id forbidden response a status code equal to that given
func (o *PutEndpointEndpointIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put endpoint endpoint Id forbidden response
func (o *PutEndpointEndpointIDForbidden) Code() int {
	return 403
}

func (o *PutEndpointEndpointIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdForbidden  %+v", 403, o.Payload)
}

func (o *PutEndpointEndpointIDForbidden) String() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdForbidden  %+v", 403, o.Payload)
}

func (o *PutEndpointEndpointIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutEndpointEndpointIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEndpointEndpointIDNotFound creates a PutEndpointEndpointIDNotFound with default headers values
func NewPutEndpointEndpointIDNotFound() *PutEndpointEndpointIDNotFound {
	return &PutEndpointEndpointIDNotFound{}
}

/*
PutEndpointEndpointIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutEndpointEndpointIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put endpoint endpoint Id not found response has a 2xx status code
func (o *PutEndpointEndpointIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put endpoint endpoint Id not found response has a 3xx status code
func (o *PutEndpointEndpointIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put endpoint endpoint Id not found response has a 4xx status code
func (o *PutEndpointEndpointIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put endpoint endpoint Id not found response has a 5xx status code
func (o *PutEndpointEndpointIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put endpoint endpoint Id not found response a status code equal to that given
func (o *PutEndpointEndpointIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put endpoint endpoint Id not found response
func (o *PutEndpointEndpointIDNotFound) Code() int {
	return 404
}

func (o *PutEndpointEndpointIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdNotFound  %+v", 404, o.Payload)
}

func (o *PutEndpointEndpointIDNotFound) String() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdNotFound  %+v", 404, o.Payload)
}

func (o *PutEndpointEndpointIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutEndpointEndpointIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEndpointEndpointIDUnprocessableEntity creates a PutEndpointEndpointIDUnprocessableEntity with default headers values
func NewPutEndpointEndpointIDUnprocessableEntity() *PutEndpointEndpointIDUnprocessableEntity {
	return &PutEndpointEndpointIDUnprocessableEntity{}
}

/*
PutEndpointEndpointIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PutEndpointEndpointIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this put endpoint endpoint Id unprocessable entity response has a 2xx status code
func (o *PutEndpointEndpointIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put endpoint endpoint Id unprocessable entity response has a 3xx status code
func (o *PutEndpointEndpointIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put endpoint endpoint Id unprocessable entity response has a 4xx status code
func (o *PutEndpointEndpointIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this put endpoint endpoint Id unprocessable entity response has a 5xx status code
func (o *PutEndpointEndpointIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this put endpoint endpoint Id unprocessable entity response a status code equal to that given
func (o *PutEndpointEndpointIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the put endpoint endpoint Id unprocessable entity response
func (o *PutEndpointEndpointIDUnprocessableEntity) Code() int {
	return 422
}

func (o *PutEndpointEndpointIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutEndpointEndpointIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /endpoint/{endpoint_id}][%d] putEndpointEndpointIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutEndpointEndpointIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutEndpointEndpointIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutEndpointEndpointIDBody put endpoint endpoint ID body
swagger:model PutEndpointEndpointIDBody
*/
type PutEndpointEndpointIDBody struct {

	// Description of the endpoint.
	// Example: An example of an endpoint.
	// Max Length: 255
	Description *string `json:"description,omitempty"`

	// Name of the endpoint.
	// Example: Example endpoint.
	// Max Length: 64
	Name *string `json:"name,omitempty"`

	// The list of tags on the resource.
	Tags []string `json:"tags"`
}

// Validate validates this put endpoint endpoint ID body
func (o *PutEndpointEndpointIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutEndpointEndpointIDBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", *o.Description, 255); err != nil {
		return err
	}

	return nil
}

func (o *PutEndpointEndpointIDBody) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 64); err != nil {
		return err
	}

	return nil
}

func (o *PutEndpointEndpointIDBody) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {

		if err := validate.MaxLength("body"+"."+"tags"+"."+strconv.Itoa(i), "body", o.Tags[i], 64); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this put endpoint endpoint ID body based on context it is used
func (o *PutEndpointEndpointIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutEndpointEndpointIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutEndpointEndpointIDBody) UnmarshalBinary(b []byte) error {
	var res PutEndpointEndpointIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
