// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new endpoint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for endpoint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEndpointEndpointID(params *DeleteEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEndpointEndpointIDAccepted, error)

	GetEndpoint(params *GetEndpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEndpointOK, error)

	GetEndpointEndpointID(params *GetEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEndpointEndpointIDOK, error)

	PostEndpoint(params *PostEndpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEndpointCreated, error)

	PutEndpointEndpointID(params *PutEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEndpointEndpointIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteEndpointEndpointID removes an existing endpoint
*/
func (a *Client) DeleteEndpointEndpointID(params *DeleteEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEndpointEndpointIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEndpointEndpointIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEndpointEndpointID",
		Method:             "DELETE",
		PathPattern:        "/endpoint/{endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteEndpointEndpointIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEndpointEndpointIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEndpointEndpointID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpoint lists existing service endpoints
*/
func (a *Client) GetEndpoint(params *GetEndpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEndpoint",
		Method:             "GET",
		PathPattern:        "/endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpointEndpointID shows existing service endpoint
*/
func (a *Client) GetEndpointEndpointID(params *GetEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEndpointEndpointIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointEndpointIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEndpointEndpointID",
		Method:             "GET",
		PathPattern:        "/endpoint/{endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEndpointEndpointIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointEndpointIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEndpointEndpointID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostEndpoint creates endpoint for accessing a service
*/
func (a *Client) PostEndpoint(params *PostEndpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEndpointCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEndpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostEndpoint",
		Method:             "POST",
		PathPattern:        "/endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEndpointCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEndpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutEndpointEndpointID updates an existing endpoint
*/
func (a *Client) PutEndpointEndpointID(params *PutEndpointEndpointIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEndpointEndpointIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEndpointEndpointIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutEndpointEndpointID",
		Method:             "PUT",
		PathPattern:        "/endpoint/{endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutEndpointEndpointIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEndpointEndpointIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutEndpointEndpointID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
