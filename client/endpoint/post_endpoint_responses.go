// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// PostEndpointReader is a Reader for the PostEndpoint structure.
type PostEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostEndpointCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEndpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostEndpointUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostEndpointForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostEndpointUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /endpoint] PostEndpoint", response, response.Code())
	}
}

// NewPostEndpointCreated creates a PostEndpointCreated with default headers values
func NewPostEndpointCreated() *PostEndpointCreated {
	return &PostEndpointCreated{}
}

/*
PostEndpointCreated describes a response with status code 201, with default header values.

Endpoint
*/
type PostEndpointCreated struct {

	/* The UUID of the created resource

	   Format: uuid
	*/
	XTargetID strfmt.UUID

	Payload *models.Endpoint
}

// IsSuccess returns true when this post endpoint created response has a 2xx status code
func (o *PostEndpointCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post endpoint created response has a 3xx status code
func (o *PostEndpointCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint created response has a 4xx status code
func (o *PostEndpointCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post endpoint created response has a 5xx status code
func (o *PostEndpointCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint created response a status code equal to that given
func (o *PostEndpointCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post endpoint created response
func (o *PostEndpointCreated) Code() int {
	return 201
}

func (o *PostEndpointCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointCreated %s", 201, payload)
}

func (o *PostEndpointCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointCreated %s", 201, payload)
}

func (o *PostEndpointCreated) GetPayload() *models.Endpoint {
	return o.Payload
}

func (o *PostEndpointCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Target-Id
	hdrXTargetID := response.GetHeader("X-Target-Id")

	if hdrXTargetID != "" {
		valxTargetId, err := formats.Parse("uuid", hdrXTargetID)
		if err != nil {
			return errors.InvalidType("X-Target-Id", "header", "strfmt.UUID", hdrXTargetID)
		}
		o.XTargetID = *(valxTargetId.(*strfmt.UUID))
	}

	o.Payload = new(models.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointBadRequest creates a PostEndpointBadRequest with default headers values
func NewPostEndpointBadRequest() *PostEndpointBadRequest {
	return &PostEndpointBadRequest{}
}

/*
PostEndpointBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostEndpointBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this post endpoint bad request response has a 2xx status code
func (o *PostEndpointBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint bad request response has a 3xx status code
func (o *PostEndpointBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint bad request response has a 4xx status code
func (o *PostEndpointBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint bad request response has a 5xx status code
func (o *PostEndpointBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint bad request response a status code equal to that given
func (o *PostEndpointBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post endpoint bad request response
func (o *PostEndpointBadRequest) Code() int {
	return 400
}

func (o *PostEndpointBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointBadRequest %s", 400, payload)
}

func (o *PostEndpointBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointBadRequest %s", 400, payload)
}

func (o *PostEndpointBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostEndpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointUnauthorized creates a PostEndpointUnauthorized with default headers values
func NewPostEndpointUnauthorized() *PostEndpointUnauthorized {
	return &PostEndpointUnauthorized{}
}

/*
PostEndpointUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostEndpointUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this post endpoint unauthorized response has a 2xx status code
func (o *PostEndpointUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint unauthorized response has a 3xx status code
func (o *PostEndpointUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint unauthorized response has a 4xx status code
func (o *PostEndpointUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint unauthorized response has a 5xx status code
func (o *PostEndpointUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint unauthorized response a status code equal to that given
func (o *PostEndpointUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post endpoint unauthorized response
func (o *PostEndpointUnauthorized) Code() int {
	return 401
}

func (o *PostEndpointUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointUnauthorized %s", 401, payload)
}

func (o *PostEndpointUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointUnauthorized %s", 401, payload)
}

func (o *PostEndpointUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostEndpointUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointForbidden creates a PostEndpointForbidden with default headers values
func NewPostEndpointForbidden() *PostEndpointForbidden {
	return &PostEndpointForbidden{}
}

/*
PostEndpointForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostEndpointForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this post endpoint forbidden response has a 2xx status code
func (o *PostEndpointForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint forbidden response has a 3xx status code
func (o *PostEndpointForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint forbidden response has a 4xx status code
func (o *PostEndpointForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint forbidden response has a 5xx status code
func (o *PostEndpointForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint forbidden response a status code equal to that given
func (o *PostEndpointForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post endpoint forbidden response
func (o *PostEndpointForbidden) Code() int {
	return 403
}

func (o *PostEndpointForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointForbidden %s", 403, payload)
}

func (o *PostEndpointForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointForbidden %s", 403, payload)
}

func (o *PostEndpointForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostEndpointForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointUnprocessableEntity creates a PostEndpointUnprocessableEntity with default headers values
func NewPostEndpointUnprocessableEntity() *PostEndpointUnprocessableEntity {
	return &PostEndpointUnprocessableEntity{}
}

/*
PostEndpointUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PostEndpointUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this post endpoint unprocessable entity response has a 2xx status code
func (o *PostEndpointUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint unprocessable entity response has a 3xx status code
func (o *PostEndpointUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint unprocessable entity response has a 4xx status code
func (o *PostEndpointUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint unprocessable entity response has a 5xx status code
func (o *PostEndpointUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint unprocessable entity response a status code equal to that given
func (o *PostEndpointUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post endpoint unprocessable entity response
func (o *PostEndpointUnprocessableEntity) Code() int {
	return 422
}

func (o *PostEndpointUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointUnprocessableEntity %s", 422, payload)
}

func (o *PostEndpointUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointUnprocessableEntity %s", 422, payload)
}

func (o *PostEndpointUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostEndpointUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
