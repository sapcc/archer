// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// PostEndpointReader is a Reader for the PostEndpoint structure.
type PostEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostEndpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostEndpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostEndpointForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostEndpointOK creates a PostEndpointOK with default headers values
func NewPostEndpointOK() *PostEndpointOK {
	return &PostEndpointOK{}
}

/*
PostEndpointOK describes a response with status code 200, with default header values.

Endpoint
*/
type PostEndpointOK struct {
	Payload *models.Endpoint
}

// IsSuccess returns true when this post endpoint o k response has a 2xx status code
func (o *PostEndpointOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post endpoint o k response has a 3xx status code
func (o *PostEndpointOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint o k response has a 4xx status code
func (o *PostEndpointOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post endpoint o k response has a 5xx status code
func (o *PostEndpointOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint o k response a status code equal to that given
func (o *PostEndpointOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post endpoint o k response
func (o *PostEndpointOK) Code() int {
	return 200
}

func (o *PostEndpointOK) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointOK  %+v", 200, o.Payload)
}

func (o *PostEndpointOK) String() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointOK  %+v", 200, o.Payload)
}

func (o *PostEndpointOK) GetPayload() *models.Endpoint {
	return o.Payload
}

func (o *PostEndpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Endpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointBadRequest creates a PostEndpointBadRequest with default headers values
func NewPostEndpointBadRequest() *PostEndpointBadRequest {
	return &PostEndpointBadRequest{}
}

/*
PostEndpointBadRequest describes a response with status code 400, with default header values.

Validation Error
*/
type PostEndpointBadRequest struct {
}

// IsSuccess returns true when this post endpoint bad request response has a 2xx status code
func (o *PostEndpointBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint bad request response has a 3xx status code
func (o *PostEndpointBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint bad request response has a 4xx status code
func (o *PostEndpointBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint bad request response has a 5xx status code
func (o *PostEndpointBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint bad request response a status code equal to that given
func (o *PostEndpointBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post endpoint bad request response
func (o *PostEndpointBadRequest) Code() int {
	return 400
}

func (o *PostEndpointBadRequest) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointBadRequest ", 400)
}

func (o *PostEndpointBadRequest) String() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointBadRequest ", 400)
}

func (o *PostEndpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEndpointForbidden creates a PostEndpointForbidden with default headers values
func NewPostEndpointForbidden() *PostEndpointForbidden {
	return &PostEndpointForbidden{}
}

/*
PostEndpointForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostEndpointForbidden struct {
}

// IsSuccess returns true when this post endpoint forbidden response has a 2xx status code
func (o *PostEndpointForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post endpoint forbidden response has a 3xx status code
func (o *PostEndpointForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post endpoint forbidden response has a 4xx status code
func (o *PostEndpointForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post endpoint forbidden response has a 5xx status code
func (o *PostEndpointForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post endpoint forbidden response a status code equal to that given
func (o *PostEndpointForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post endpoint forbidden response
func (o *PostEndpointForbidden) Code() int {
	return 403
}

func (o *PostEndpointForbidden) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointForbidden ", 403)
}

func (o *PostEndpointForbidden) String() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointForbidden ", 403)
}

func (o *PostEndpointForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
