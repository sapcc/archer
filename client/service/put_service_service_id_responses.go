// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// PutServiceServiceIDReader is a Reader for the PutServiceServiceID structure.
type PutServiceServiceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutServiceServiceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutServiceServiceIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutServiceServiceIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutServiceServiceIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutServiceServiceIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutServiceServiceIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPutServiceServiceIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutServiceServiceIDOK creates a PutServiceServiceIDOK with default headers values
func NewPutServiceServiceIDOK() *PutServiceServiceIDOK {
	return &PutServiceServiceIDOK{}
}

/*
PutServiceServiceIDOK describes a response with status code 200, with default header values.

Service
*/
type PutServiceServiceIDOK struct {
	Payload *models.Service
}

// IsSuccess returns true when this put service service Id o k response has a 2xx status code
func (o *PutServiceServiceIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put service service Id o k response has a 3xx status code
func (o *PutServiceServiceIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id o k response has a 4xx status code
func (o *PutServiceServiceIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put service service Id o k response has a 5xx status code
func (o *PutServiceServiceIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id o k response a status code equal to that given
func (o *PutServiceServiceIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put service service Id o k response
func (o *PutServiceServiceIDOK) Code() int {
	return 200
}

func (o *PutServiceServiceIDOK) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdOK  %+v", 200, o.Payload)
}

func (o *PutServiceServiceIDOK) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdOK  %+v", 200, o.Payload)
}

func (o *PutServiceServiceIDOK) GetPayload() *models.Service {
	return o.Payload
}

func (o *PutServiceServiceIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Service)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServiceServiceIDUnauthorized creates a PutServiceServiceIDUnauthorized with default headers values
func NewPutServiceServiceIDUnauthorized() *PutServiceServiceIDUnauthorized {
	return &PutServiceServiceIDUnauthorized{}
}

/*
PutServiceServiceIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutServiceServiceIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this put service service Id unauthorized response has a 2xx status code
func (o *PutServiceServiceIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put service service Id unauthorized response has a 3xx status code
func (o *PutServiceServiceIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id unauthorized response has a 4xx status code
func (o *PutServiceServiceIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put service service Id unauthorized response has a 5xx status code
func (o *PutServiceServiceIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id unauthorized response a status code equal to that given
func (o *PutServiceServiceIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put service service Id unauthorized response
func (o *PutServiceServiceIDUnauthorized) Code() int {
	return 401
}

func (o *PutServiceServiceIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutServiceServiceIDUnauthorized) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutServiceServiceIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutServiceServiceIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServiceServiceIDForbidden creates a PutServiceServiceIDForbidden with default headers values
func NewPutServiceServiceIDForbidden() *PutServiceServiceIDForbidden {
	return &PutServiceServiceIDForbidden{}
}

/*
PutServiceServiceIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutServiceServiceIDForbidden struct {
}

// IsSuccess returns true when this put service service Id forbidden response has a 2xx status code
func (o *PutServiceServiceIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put service service Id forbidden response has a 3xx status code
func (o *PutServiceServiceIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id forbidden response has a 4xx status code
func (o *PutServiceServiceIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put service service Id forbidden response has a 5xx status code
func (o *PutServiceServiceIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id forbidden response a status code equal to that given
func (o *PutServiceServiceIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put service service Id forbidden response
func (o *PutServiceServiceIDForbidden) Code() int {
	return 403
}

func (o *PutServiceServiceIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdForbidden ", 403)
}

func (o *PutServiceServiceIDForbidden) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdForbidden ", 403)
}

func (o *PutServiceServiceIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutServiceServiceIDNotFound creates a PutServiceServiceIDNotFound with default headers values
func NewPutServiceServiceIDNotFound() *PutServiceServiceIDNotFound {
	return &PutServiceServiceIDNotFound{}
}

/*
PutServiceServiceIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutServiceServiceIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put service service Id not found response has a 2xx status code
func (o *PutServiceServiceIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put service service Id not found response has a 3xx status code
func (o *PutServiceServiceIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id not found response has a 4xx status code
func (o *PutServiceServiceIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put service service Id not found response has a 5xx status code
func (o *PutServiceServiceIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id not found response a status code equal to that given
func (o *PutServiceServiceIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put service service Id not found response
func (o *PutServiceServiceIDNotFound) Code() int {
	return 404
}

func (o *PutServiceServiceIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdNotFound  %+v", 404, o.Payload)
}

func (o *PutServiceServiceIDNotFound) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdNotFound  %+v", 404, o.Payload)
}

func (o *PutServiceServiceIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutServiceServiceIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServiceServiceIDConflict creates a PutServiceServiceIDConflict with default headers values
func NewPutServiceServiceIDConflict() *PutServiceServiceIDConflict {
	return &PutServiceServiceIDConflict{}
}

/*
PutServiceServiceIDConflict describes a response with status code 409, with default header values.

Duplicate entry
*/
type PutServiceServiceIDConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this put service service Id conflict response has a 2xx status code
func (o *PutServiceServiceIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put service service Id conflict response has a 3xx status code
func (o *PutServiceServiceIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id conflict response has a 4xx status code
func (o *PutServiceServiceIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put service service Id conflict response has a 5xx status code
func (o *PutServiceServiceIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id conflict response a status code equal to that given
func (o *PutServiceServiceIDConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the put service service Id conflict response
func (o *PutServiceServiceIDConflict) Code() int {
	return 409
}

func (o *PutServiceServiceIDConflict) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdConflict  %+v", 409, o.Payload)
}

func (o *PutServiceServiceIDConflict) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdConflict  %+v", 409, o.Payload)
}

func (o *PutServiceServiceIDConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutServiceServiceIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServiceServiceIDUnprocessableEntity creates a PutServiceServiceIDUnprocessableEntity with default headers values
func NewPutServiceServiceIDUnprocessableEntity() *PutServiceServiceIDUnprocessableEntity {
	return &PutServiceServiceIDUnprocessableEntity{}
}

/*
PutServiceServiceIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PutServiceServiceIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this put service service Id unprocessable entity response has a 2xx status code
func (o *PutServiceServiceIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put service service Id unprocessable entity response has a 3xx status code
func (o *PutServiceServiceIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put service service Id unprocessable entity response has a 4xx status code
func (o *PutServiceServiceIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this put service service Id unprocessable entity response has a 5xx status code
func (o *PutServiceServiceIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this put service service Id unprocessable entity response a status code equal to that given
func (o *PutServiceServiceIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the put service service Id unprocessable entity response
func (o *PutServiceServiceIDUnprocessableEntity) Code() int {
	return 422
}

func (o *PutServiceServiceIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutServiceServiceIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /service/{service_id}][%d] putServiceServiceIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutServiceServiceIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutServiceServiceIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
