// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetServiceServiceIDEndpointsReader is a Reader for the GetServiceServiceIDEndpoints structure.
type GetServiceServiceIDEndpointsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceServiceIDEndpointsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceServiceIDEndpointsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceServiceIDEndpointsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceServiceIDEndpointsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceServiceIDEndpointsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceServiceIDEndpointsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetServiceServiceIDEndpointsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetServiceServiceIDEndpointsOK creates a GetServiceServiceIDEndpointsOK with default headers values
func NewGetServiceServiceIDEndpointsOK() *GetServiceServiceIDEndpointsOK {
	return &GetServiceServiceIDEndpointsOK{}
}

/*
GetServiceServiceIDEndpointsOK describes a response with status code 200, with default header values.

An array of service endpoint consumers.
*/
type GetServiceServiceIDEndpointsOK struct {
	Payload *GetServiceServiceIDEndpointsOKBody
}

// IsSuccess returns true when this get service service Id endpoints o k response has a 2xx status code
func (o *GetServiceServiceIDEndpointsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service service Id endpoints o k response has a 3xx status code
func (o *GetServiceServiceIDEndpointsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints o k response has a 4xx status code
func (o *GetServiceServiceIDEndpointsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service service Id endpoints o k response has a 5xx status code
func (o *GetServiceServiceIDEndpointsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints o k response a status code equal to that given
func (o *GetServiceServiceIDEndpointsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service service Id endpoints o k response
func (o *GetServiceServiceIDEndpointsOK) Code() int {
	return 200
}

func (o *GetServiceServiceIDEndpointsOK) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsOK  %+v", 200, o.Payload)
}

func (o *GetServiceServiceIDEndpointsOK) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsOK  %+v", 200, o.Payload)
}

func (o *GetServiceServiceIDEndpointsOK) GetPayload() *GetServiceServiceIDEndpointsOKBody {
	return o.Payload
}

func (o *GetServiceServiceIDEndpointsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetServiceServiceIDEndpointsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceServiceIDEndpointsBadRequest creates a GetServiceServiceIDEndpointsBadRequest with default headers values
func NewGetServiceServiceIDEndpointsBadRequest() *GetServiceServiceIDEndpointsBadRequest {
	return &GetServiceServiceIDEndpointsBadRequest{}
}

/*
GetServiceServiceIDEndpointsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetServiceServiceIDEndpointsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service service Id endpoints bad request response has a 2xx status code
func (o *GetServiceServiceIDEndpointsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service service Id endpoints bad request response has a 3xx status code
func (o *GetServiceServiceIDEndpointsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints bad request response has a 4xx status code
func (o *GetServiceServiceIDEndpointsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service service Id endpoints bad request response has a 5xx status code
func (o *GetServiceServiceIDEndpointsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints bad request response a status code equal to that given
func (o *GetServiceServiceIDEndpointsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get service service Id endpoints bad request response
func (o *GetServiceServiceIDEndpointsBadRequest) Code() int {
	return 400
}

func (o *GetServiceServiceIDEndpointsBadRequest) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsBadRequest  %+v", 400, o.Payload)
}

func (o *GetServiceServiceIDEndpointsBadRequest) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsBadRequest  %+v", 400, o.Payload)
}

func (o *GetServiceServiceIDEndpointsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceServiceIDEndpointsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceServiceIDEndpointsUnauthorized creates a GetServiceServiceIDEndpointsUnauthorized with default headers values
func NewGetServiceServiceIDEndpointsUnauthorized() *GetServiceServiceIDEndpointsUnauthorized {
	return &GetServiceServiceIDEndpointsUnauthorized{}
}

/*
GetServiceServiceIDEndpointsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServiceServiceIDEndpointsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service service Id endpoints unauthorized response has a 2xx status code
func (o *GetServiceServiceIDEndpointsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service service Id endpoints unauthorized response has a 3xx status code
func (o *GetServiceServiceIDEndpointsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints unauthorized response has a 4xx status code
func (o *GetServiceServiceIDEndpointsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service service Id endpoints unauthorized response has a 5xx status code
func (o *GetServiceServiceIDEndpointsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints unauthorized response a status code equal to that given
func (o *GetServiceServiceIDEndpointsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get service service Id endpoints unauthorized response
func (o *GetServiceServiceIDEndpointsUnauthorized) Code() int {
	return 401
}

func (o *GetServiceServiceIDEndpointsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceServiceIDEndpointsUnauthorized) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceServiceIDEndpointsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceServiceIDEndpointsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceServiceIDEndpointsForbidden creates a GetServiceServiceIDEndpointsForbidden with default headers values
func NewGetServiceServiceIDEndpointsForbidden() *GetServiceServiceIDEndpointsForbidden {
	return &GetServiceServiceIDEndpointsForbidden{}
}

/*
GetServiceServiceIDEndpointsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServiceServiceIDEndpointsForbidden struct {
}

// IsSuccess returns true when this get service service Id endpoints forbidden response has a 2xx status code
func (o *GetServiceServiceIDEndpointsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service service Id endpoints forbidden response has a 3xx status code
func (o *GetServiceServiceIDEndpointsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints forbidden response has a 4xx status code
func (o *GetServiceServiceIDEndpointsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service service Id endpoints forbidden response has a 5xx status code
func (o *GetServiceServiceIDEndpointsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints forbidden response a status code equal to that given
func (o *GetServiceServiceIDEndpointsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get service service Id endpoints forbidden response
func (o *GetServiceServiceIDEndpointsForbidden) Code() int {
	return 403
}

func (o *GetServiceServiceIDEndpointsForbidden) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsForbidden ", 403)
}

func (o *GetServiceServiceIDEndpointsForbidden) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsForbidden ", 403)
}

func (o *GetServiceServiceIDEndpointsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServiceServiceIDEndpointsNotFound creates a GetServiceServiceIDEndpointsNotFound with default headers values
func NewGetServiceServiceIDEndpointsNotFound() *GetServiceServiceIDEndpointsNotFound {
	return &GetServiceServiceIDEndpointsNotFound{}
}

/*
GetServiceServiceIDEndpointsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetServiceServiceIDEndpointsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service service Id endpoints not found response has a 2xx status code
func (o *GetServiceServiceIDEndpointsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service service Id endpoints not found response has a 3xx status code
func (o *GetServiceServiceIDEndpointsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints not found response has a 4xx status code
func (o *GetServiceServiceIDEndpointsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service service Id endpoints not found response has a 5xx status code
func (o *GetServiceServiceIDEndpointsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints not found response a status code equal to that given
func (o *GetServiceServiceIDEndpointsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get service service Id endpoints not found response
func (o *GetServiceServiceIDEndpointsNotFound) Code() int {
	return 404
}

func (o *GetServiceServiceIDEndpointsNotFound) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceServiceIDEndpointsNotFound) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceServiceIDEndpointsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceServiceIDEndpointsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceServiceIDEndpointsUnprocessableEntity creates a GetServiceServiceIDEndpointsUnprocessableEntity with default headers values
func NewGetServiceServiceIDEndpointsUnprocessableEntity() *GetServiceServiceIDEndpointsUnprocessableEntity {
	return &GetServiceServiceIDEndpointsUnprocessableEntity{}
}

/*
GetServiceServiceIDEndpointsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetServiceServiceIDEndpointsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service service Id endpoints unprocessable entity response has a 2xx status code
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service service Id endpoints unprocessable entity response has a 3xx status code
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service service Id endpoints unprocessable entity response has a 4xx status code
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service service Id endpoints unprocessable entity response has a 5xx status code
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get service service Id endpoints unprocessable entity response a status code equal to that given
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get service service Id endpoints unprocessable entity response
func (o *GetServiceServiceIDEndpointsUnprocessableEntity) Code() int {
	return 422
}

func (o *GetServiceServiceIDEndpointsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetServiceServiceIDEndpointsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /service/{service_id}/endpoints][%d] getServiceServiceIdEndpointsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetServiceServiceIDEndpointsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceServiceIDEndpointsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetServiceServiceIDEndpointsOKBody get service service ID endpoints o k body
swagger:model GetServiceServiceIDEndpointsOKBody
*/
type GetServiceServiceIDEndpointsOKBody struct {

	// items
	Items []*models.EndpointConsumer `json:"items"`

	// links
	Links []*models.Link `json:"links,omitempty"`
}

// Validate validates this get service service ID endpoints o k body
func (o *GetServiceServiceIDEndpointsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetServiceServiceIDEndpointsOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getServiceServiceIdEndpointsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getServiceServiceIdEndpointsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetServiceServiceIDEndpointsOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getServiceServiceIdEndpointsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getServiceServiceIdEndpointsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get service service ID endpoints o k body based on the context it is used
func (o *GetServiceServiceIDEndpointsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetServiceServiceIDEndpointsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getServiceServiceIdEndpointsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getServiceServiceIdEndpointsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetServiceServiceIDEndpointsOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getServiceServiceIdEndpointsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getServiceServiceIdEndpointsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetServiceServiceIDEndpointsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetServiceServiceIDEndpointsOKBody) UnmarshalBinary(b []byte) error {
	var res GetServiceServiceIDEndpointsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
