// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetServiceReader is a Reader for the GetService structure.
type GetServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetServiceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /service] GetService", response, response.Code())
	}
}

// NewGetServiceOK creates a GetServiceOK with default headers values
func NewGetServiceOK() *GetServiceOK {
	return &GetServiceOK{}
}

/*
GetServiceOK describes a response with status code 200, with default header values.

An array of services.
*/
type GetServiceOK struct {
	Payload *GetServiceOKBody
}

// IsSuccess returns true when this get service o k response has a 2xx status code
func (o *GetServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service o k response has a 3xx status code
func (o *GetServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service o k response has a 4xx status code
func (o *GetServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service o k response has a 5xx status code
func (o *GetServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service o k response a status code equal to that given
func (o *GetServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service o k response
func (o *GetServiceOK) Code() int {
	return 200
}

func (o *GetServiceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceOK %s", 200, payload)
}

func (o *GetServiceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceOK %s", 200, payload)
}

func (o *GetServiceOK) GetPayload() *GetServiceOKBody {
	return o.Payload
}

func (o *GetServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetServiceBadRequest creates a GetServiceBadRequest with default headers values
func NewGetServiceBadRequest() *GetServiceBadRequest {
	return &GetServiceBadRequest{}
}

/*
GetServiceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetServiceBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service bad request response has a 2xx status code
func (o *GetServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service bad request response has a 3xx status code
func (o *GetServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service bad request response has a 4xx status code
func (o *GetServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service bad request response has a 5xx status code
func (o *GetServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get service bad request response a status code equal to that given
func (o *GetServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get service bad request response
func (o *GetServiceBadRequest) Code() int {
	return 400
}

func (o *GetServiceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceBadRequest %s", 400, payload)
}

func (o *GetServiceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceBadRequest %s", 400, payload)
}

func (o *GetServiceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetServiceUnauthorized creates a GetServiceUnauthorized with default headers values
func NewGetServiceUnauthorized() *GetServiceUnauthorized {
	return &GetServiceUnauthorized{}
}

/*
GetServiceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServiceUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service unauthorized response has a 2xx status code
func (o *GetServiceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service unauthorized response has a 3xx status code
func (o *GetServiceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service unauthorized response has a 4xx status code
func (o *GetServiceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service unauthorized response has a 5xx status code
func (o *GetServiceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get service unauthorized response a status code equal to that given
func (o *GetServiceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get service unauthorized response
func (o *GetServiceUnauthorized) Code() int {
	return 401
}

func (o *GetServiceUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceUnauthorized %s", 401, payload)
}

func (o *GetServiceUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceUnauthorized %s", 401, payload)
}

func (o *GetServiceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetServiceForbidden creates a GetServiceForbidden with default headers values
func NewGetServiceForbidden() *GetServiceForbidden {
	return &GetServiceForbidden{}
}

/*
GetServiceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServiceForbidden struct {
}

// IsSuccess returns true when this get service forbidden response has a 2xx status code
func (o *GetServiceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service forbidden response has a 3xx status code
func (o *GetServiceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service forbidden response has a 4xx status code
func (o *GetServiceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service forbidden response has a 5xx status code
func (o *GetServiceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get service forbidden response a status code equal to that given
func (o *GetServiceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get service forbidden response
func (o *GetServiceForbidden) Code() int {
	return 403
}

func (o *GetServiceForbidden) Error() string {
	return fmt.Sprintf("[GET /service][%d] getServiceForbidden", 403)
}

func (o *GetServiceForbidden) String() string {
	return fmt.Sprintf("[GET /service][%d] getServiceForbidden", 403)
}

func (o *GetServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServiceUnprocessableEntity creates a GetServiceUnprocessableEntity with default headers values
func NewGetServiceUnprocessableEntity() *GetServiceUnprocessableEntity {
	return &GetServiceUnprocessableEntity{}
}

/*
GetServiceUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetServiceUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service unprocessable entity response has a 2xx status code
func (o *GetServiceUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service unprocessable entity response has a 3xx status code
func (o *GetServiceUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service unprocessable entity response has a 4xx status code
func (o *GetServiceUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service unprocessable entity response has a 5xx status code
func (o *GetServiceUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get service unprocessable entity response a status code equal to that given
func (o *GetServiceUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get service unprocessable entity response
func (o *GetServiceUnprocessableEntity) Code() int {
	return 422
}

func (o *GetServiceUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceUnprocessableEntity %s", 422, payload)
}

func (o *GetServiceUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /service][%d] getServiceUnprocessableEntity %s", 422, payload)
}

func (o *GetServiceUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetServiceOKBody get service o k body
swagger:model GetServiceOKBody
*/
type GetServiceOKBody struct {

	// items
	Items []*models.Service `json:"items"`

	// links
	Links []*models.Link `json:"links,omitempty"`
}

// Validate validates this get service o k body
func (o *GetServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetServiceOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getServiceOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getServiceOK" + "." + "items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (o *GetServiceOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getServiceOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getServiceOK" + "." + "links" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get service o k body based on the context it is used
func (o *GetServiceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetServiceOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {

			if swag.IsZero(o.Items[i]) { // not required
				return nil
			}

			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getServiceOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getServiceOK" + "." + "items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (o *GetServiceOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {

			if swag.IsZero(o.Links[i]) { // not required
				return nil
			}

			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getServiceOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getServiceOK" + "." + "links" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetServiceOKBody) UnmarshalBinary(b []byte) error {
	var res GetServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
