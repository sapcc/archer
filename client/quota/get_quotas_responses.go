// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetQuotasReader is a Reader for the GetQuotas structure.
type GetQuotasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQuotasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQuotasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetQuotasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQuotasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetQuotasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetQuotasUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQuotasOK creates a GetQuotasOK with default headers values
func NewGetQuotasOK() *GetQuotasOK {
	return &GetQuotasOK{}
}

/*
GetQuotasOK describes a response with status code 200, with default header values.

A JSON array of quotas
*/
type GetQuotasOK struct {
	Payload *GetQuotasOKBody
}

// IsSuccess returns true when this get quotas o k response has a 2xx status code
func (o *GetQuotasOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get quotas o k response has a 3xx status code
func (o *GetQuotasOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas o k response has a 4xx status code
func (o *GetQuotasOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get quotas o k response has a 5xx status code
func (o *GetQuotasOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas o k response a status code equal to that given
func (o *GetQuotasOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get quotas o k response
func (o *GetQuotasOK) Code() int {
	return 200
}

func (o *GetQuotasOK) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasOK  %+v", 200, o.Payload)
}

func (o *GetQuotasOK) String() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasOK  %+v", 200, o.Payload)
}

func (o *GetQuotasOK) GetPayload() *GetQuotasOKBody {
	return o.Payload
}

func (o *GetQuotasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetQuotasOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasUnauthorized creates a GetQuotasUnauthorized with default headers values
func NewGetQuotasUnauthorized() *GetQuotasUnauthorized {
	return &GetQuotasUnauthorized{}
}

/*
GetQuotasUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetQuotasUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get quotas unauthorized response has a 2xx status code
func (o *GetQuotasUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas unauthorized response has a 3xx status code
func (o *GetQuotasUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas unauthorized response has a 4xx status code
func (o *GetQuotasUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas unauthorized response has a 5xx status code
func (o *GetQuotasUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas unauthorized response a status code equal to that given
func (o *GetQuotasUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get quotas unauthorized response
func (o *GetQuotasUnauthorized) Code() int {
	return 401
}

func (o *GetQuotasUnauthorized) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQuotasUnauthorized) String() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQuotasUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasForbidden creates a GetQuotasForbidden with default headers values
func NewGetQuotasForbidden() *GetQuotasForbidden {
	return &GetQuotasForbidden{}
}

/*
GetQuotasForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetQuotasForbidden struct {
}

// IsSuccess returns true when this get quotas forbidden response has a 2xx status code
func (o *GetQuotasForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas forbidden response has a 3xx status code
func (o *GetQuotasForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas forbidden response has a 4xx status code
func (o *GetQuotasForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas forbidden response has a 5xx status code
func (o *GetQuotasForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas forbidden response a status code equal to that given
func (o *GetQuotasForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get quotas forbidden response
func (o *GetQuotasForbidden) Code() int {
	return 403
}

func (o *GetQuotasForbidden) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasForbidden ", 403)
}

func (o *GetQuotasForbidden) String() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasForbidden ", 403)
}

func (o *GetQuotasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetQuotasNotFound creates a GetQuotasNotFound with default headers values
func NewGetQuotasNotFound() *GetQuotasNotFound {
	return &GetQuotasNotFound{}
}

/*
GetQuotasNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetQuotasNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get quotas not found response has a 2xx status code
func (o *GetQuotasNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas not found response has a 3xx status code
func (o *GetQuotasNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas not found response has a 4xx status code
func (o *GetQuotasNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas not found response has a 5xx status code
func (o *GetQuotasNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas not found response a status code equal to that given
func (o *GetQuotasNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get quotas not found response
func (o *GetQuotasNotFound) Code() int {
	return 404
}

func (o *GetQuotasNotFound) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasNotFound  %+v", 404, o.Payload)
}

func (o *GetQuotasNotFound) String() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasNotFound  %+v", 404, o.Payload)
}

func (o *GetQuotasNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasUnprocessableEntity creates a GetQuotasUnprocessableEntity with default headers values
func NewGetQuotasUnprocessableEntity() *GetQuotasUnprocessableEntity {
	return &GetQuotasUnprocessableEntity{}
}

/*
GetQuotasUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetQuotasUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get quotas unprocessable entity response has a 2xx status code
func (o *GetQuotasUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas unprocessable entity response has a 3xx status code
func (o *GetQuotasUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas unprocessable entity response has a 4xx status code
func (o *GetQuotasUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas unprocessable entity response has a 5xx status code
func (o *GetQuotasUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas unprocessable entity response a status code equal to that given
func (o *GetQuotasUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get quotas unprocessable entity response
func (o *GetQuotasUnprocessableEntity) Code() int {
	return 422
}

func (o *GetQuotasUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetQuotasUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetQuotasUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetQuotasOKBody get quotas o k body
swagger:model GetQuotasOKBody
*/
type GetQuotasOKBody struct {

	// links
	Links []*models.Link `json:"links,omitempty"`

	// quotas
	Quotas []*GetQuotasOKBodyQuotasItems0 `json:"quotas"`
}

// Validate validates this get quotas o k body
func (o *GetQuotasOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuotas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetQuotasOKBody) validateQuotas(formats strfmt.Registry) error {
	if swag.IsZero(o.Quotas) { // not required
		return nil
	}

	for i := 0; i < len(o.Quotas); i++ {
		if swag.IsZero(o.Quotas[i]) { // not required
			continue
		}

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get quotas o k body based on the context it is used
func (o *GetQuotasOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetQuotasOKBody) contextValidateQuotas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Quotas); i++ {

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetQuotasOKBodyQuotasItems0 get quotas o k body quotas items0
swagger:model GetQuotasOKBodyQuotasItems0
*/
type GetQuotasOKBodyQuotasItems0 struct {
	models.Quota

	models.QuotaUsage

	// project id
	ProjectID models.Project `json:"project_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.Quota
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.Quota = aO0

	// AO1
	var aO1 models.QuotaUsage
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.QuotaUsage = aO1

	// AO2
	var dataAO2 struct {
		ProjectID models.Project `json:"project_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	o.ProjectID = dataAO2.ProjectID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetQuotasOKBodyQuotasItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(o.Quota)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.QuotaUsage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ProjectID models.Project `json:"project_id"`
	}

	dataAO2.ProjectID = o.ProjectID

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get quotas o k body quotas items0
func (o *GetQuotasOKBodyQuotasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBodyQuotasItems0) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectID) { // not required
		return nil
	}

	if err := o.ProjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get quotas o k body quotas items0 based on the context it is used
func (o *GetQuotasOKBodyQuotasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBodyQuotasItems0) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ProjectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBodyQuotasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
