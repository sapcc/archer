// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetQuotasProjectIDReader is a Reader for the GetQuotasProjectID structure.
type GetQuotasProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQuotasProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQuotasProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetQuotasProjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQuotasProjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetQuotasProjectIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQuotasProjectIDOK creates a GetQuotasProjectIDOK with default headers values
func NewGetQuotasProjectIDOK() *GetQuotasProjectIDOK {
	return &GetQuotasProjectIDOK{}
}

/*
GetQuotasProjectIDOK describes a response with status code 200, with default header values.

Shows the details of a specific monitor.
*/
type GetQuotasProjectIDOK struct {
	Payload *GetQuotasProjectIDOKBody
}

// IsSuccess returns true when this get quotas project Id o k response has a 2xx status code
func (o *GetQuotasProjectIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get quotas project Id o k response has a 3xx status code
func (o *GetQuotasProjectIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas project Id o k response has a 4xx status code
func (o *GetQuotasProjectIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get quotas project Id o k response has a 5xx status code
func (o *GetQuotasProjectIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas project Id o k response a status code equal to that given
func (o *GetQuotasProjectIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get quotas project Id o k response
func (o *GetQuotasProjectIDOK) Code() int {
	return 200
}

func (o *GetQuotasProjectIDOK) Error() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdOK  %+v", 200, o.Payload)
}

func (o *GetQuotasProjectIDOK) String() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdOK  %+v", 200, o.Payload)
}

func (o *GetQuotasProjectIDOK) GetPayload() *GetQuotasProjectIDOKBody {
	return o.Payload
}

func (o *GetQuotasProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetQuotasProjectIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasProjectIDUnauthorized creates a GetQuotasProjectIDUnauthorized with default headers values
func NewGetQuotasProjectIDUnauthorized() *GetQuotasProjectIDUnauthorized {
	return &GetQuotasProjectIDUnauthorized{}
}

/*
GetQuotasProjectIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetQuotasProjectIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get quotas project Id unauthorized response has a 2xx status code
func (o *GetQuotasProjectIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas project Id unauthorized response has a 3xx status code
func (o *GetQuotasProjectIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas project Id unauthorized response has a 4xx status code
func (o *GetQuotasProjectIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas project Id unauthorized response has a 5xx status code
func (o *GetQuotasProjectIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas project Id unauthorized response a status code equal to that given
func (o *GetQuotasProjectIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get quotas project Id unauthorized response
func (o *GetQuotasProjectIDUnauthorized) Code() int {
	return 401
}

func (o *GetQuotasProjectIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQuotasProjectIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQuotasProjectIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasProjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasProjectIDForbidden creates a GetQuotasProjectIDForbidden with default headers values
func NewGetQuotasProjectIDForbidden() *GetQuotasProjectIDForbidden {
	return &GetQuotasProjectIDForbidden{}
}

/*
GetQuotasProjectIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetQuotasProjectIDForbidden struct {
}

// IsSuccess returns true when this get quotas project Id forbidden response has a 2xx status code
func (o *GetQuotasProjectIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas project Id forbidden response has a 3xx status code
func (o *GetQuotasProjectIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas project Id forbidden response has a 4xx status code
func (o *GetQuotasProjectIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas project Id forbidden response has a 5xx status code
func (o *GetQuotasProjectIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas project Id forbidden response a status code equal to that given
func (o *GetQuotasProjectIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get quotas project Id forbidden response
func (o *GetQuotasProjectIDForbidden) Code() int {
	return 403
}

func (o *GetQuotasProjectIDForbidden) Error() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdForbidden ", 403)
}

func (o *GetQuotasProjectIDForbidden) String() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdForbidden ", 403)
}

func (o *GetQuotasProjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetQuotasProjectIDUnprocessableEntity creates a GetQuotasProjectIDUnprocessableEntity with default headers values
func NewGetQuotasProjectIDUnprocessableEntity() *GetQuotasProjectIDUnprocessableEntity {
	return &GetQuotasProjectIDUnprocessableEntity{}
}

/*
GetQuotasProjectIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetQuotasProjectIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get quotas project Id unprocessable entity response has a 2xx status code
func (o *GetQuotasProjectIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get quotas project Id unprocessable entity response has a 3xx status code
func (o *GetQuotasProjectIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get quotas project Id unprocessable entity response has a 4xx status code
func (o *GetQuotasProjectIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get quotas project Id unprocessable entity response has a 5xx status code
func (o *GetQuotasProjectIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get quotas project Id unprocessable entity response a status code equal to that given
func (o *GetQuotasProjectIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get quotas project Id unprocessable entity response
func (o *GetQuotasProjectIDUnprocessableEntity) Code() int {
	return 422
}

func (o *GetQuotasProjectIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetQuotasProjectIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /quotas/{project_id}][%d] getQuotasProjectIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetQuotasProjectIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasProjectIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetQuotasProjectIDOKBody get quotas project ID o k body
swagger:model GetQuotasProjectIDOKBody
*/
type GetQuotasProjectIDOKBody struct {
	models.Quota

	models.QuotaUsage
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetQuotasProjectIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetQuotasProjectIDOKBodyAO0
	var getQuotasProjectIDOKBodyAO0 models.Quota
	if err := swag.ReadJSON(raw, &getQuotasProjectIDOKBodyAO0); err != nil {
		return err
	}
	o.Quota = getQuotasProjectIDOKBodyAO0

	// GetQuotasProjectIDOKBodyAO1
	var getQuotasProjectIDOKBodyAO1 models.QuotaUsage
	if err := swag.ReadJSON(raw, &getQuotasProjectIDOKBodyAO1); err != nil {
		return err
	}
	o.QuotaUsage = getQuotasProjectIDOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetQuotasProjectIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getQuotasProjectIDOKBodyAO0, err := swag.WriteJSON(o.Quota)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getQuotasProjectIDOKBodyAO0)

	getQuotasProjectIDOKBodyAO1, err := swag.WriteJSON(o.QuotaUsage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getQuotasProjectIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get quotas project ID o k body
func (o *GetQuotasProjectIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this get quotas project ID o k body based on the context it is used
func (o *GetQuotasProjectIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasProjectIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasProjectIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasProjectIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
