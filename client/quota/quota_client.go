// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new quota API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quota API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteQuotasProjectID(params *DeleteQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQuotasProjectIDNoContent, error)

	GetQuotas(params *GetQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasOK, error)

	GetQuotasDefaults(params *GetQuotasDefaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasDefaultsOK, error)

	GetQuotasProjectID(params *GetQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasProjectIDOK, error)

	PutQuotasProjectID(params *PutQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutQuotasProjectIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteQuotasProjectID resets all quota of a project
*/
func (a *Client) DeleteQuotasProjectID(params *DeleteQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQuotasProjectIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuotasProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQuotasProjectID",
		Method:             "DELETE",
		PathPattern:        "/quotas/{project_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQuotasProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQuotasProjectIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteQuotasProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQuotas lists quotas
*/
func (a *Client) GetQuotas(params *GetQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQuotas",
		Method:             "GET",
		PathPattern:        "/quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQuotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQuotasDefaults shows quota defaults
*/
func (a *Client) GetQuotasDefaults(params *GetQuotasDefaultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasDefaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotasDefaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQuotasDefaults",
		Method:             "GET",
		PathPattern:        "/quotas/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotasDefaultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQuotasDefaultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQuotasDefaults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQuotasProjectID shows quota detail
*/
func (a *Client) GetQuotasProjectID(params *GetQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQuotasProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotasProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQuotasProjectID",
		Method:             "GET",
		PathPattern:        "/quotas/{project_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotasProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQuotasProjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQuotasProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutQuotasProjectID updates quota
*/
func (a *Client) PutQuotasProjectID(params *PutQuotasProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutQuotasProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutQuotasProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutQuotasProjectID",
		Method:             "PUT",
		PathPattern:        "/quotas/{project_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutQuotasProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutQuotasProjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutQuotasProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
