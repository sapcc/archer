// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/archer/models"
)

// PutQuotasProjectIDReader is a Reader for the PutQuotasProjectID structure.
type PutQuotasProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutQuotasProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutQuotasProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutQuotasProjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutQuotasProjectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutQuotasProjectIDOK creates a PutQuotasProjectIDOK with default headers values
func NewPutQuotasProjectIDOK() *PutQuotasProjectIDOK {
	return &PutQuotasProjectIDOK{}
}

/*
PutQuotasProjectIDOK describes a response with status code 200, with default header values.

Updated quota for a project.
*/
type PutQuotasProjectIDOK struct {
	Payload *PutQuotasProjectIDOKBody
}

// IsSuccess returns true when this put quotas project Id o k response has a 2xx status code
func (o *PutQuotasProjectIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put quotas project Id o k response has a 3xx status code
func (o *PutQuotasProjectIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put quotas project Id o k response has a 4xx status code
func (o *PutQuotasProjectIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put quotas project Id o k response has a 5xx status code
func (o *PutQuotasProjectIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put quotas project Id o k response a status code equal to that given
func (o *PutQuotasProjectIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put quotas project Id o k response
func (o *PutQuotasProjectIDOK) Code() int {
	return 200
}

func (o *PutQuotasProjectIDOK) Error() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdOK  %+v", 200, o.Payload)
}

func (o *PutQuotasProjectIDOK) String() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdOK  %+v", 200, o.Payload)
}

func (o *PutQuotasProjectIDOK) GetPayload() *PutQuotasProjectIDOKBody {
	return o.Payload
}

func (o *PutQuotasProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutQuotasProjectIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQuotasProjectIDForbidden creates a PutQuotasProjectIDForbidden with default headers values
func NewPutQuotasProjectIDForbidden() *PutQuotasProjectIDForbidden {
	return &PutQuotasProjectIDForbidden{}
}

/*
PutQuotasProjectIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutQuotasProjectIDForbidden struct {
}

// IsSuccess returns true when this put quotas project Id forbidden response has a 2xx status code
func (o *PutQuotasProjectIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put quotas project Id forbidden response has a 3xx status code
func (o *PutQuotasProjectIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put quotas project Id forbidden response has a 4xx status code
func (o *PutQuotasProjectIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put quotas project Id forbidden response has a 5xx status code
func (o *PutQuotasProjectIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put quotas project Id forbidden response a status code equal to that given
func (o *PutQuotasProjectIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put quotas project Id forbidden response
func (o *PutQuotasProjectIDForbidden) Code() int {
	return 403
}

func (o *PutQuotasProjectIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdForbidden ", 403)
}

func (o *PutQuotasProjectIDForbidden) String() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdForbidden ", 403)
}

func (o *PutQuotasProjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutQuotasProjectIDNotFound creates a PutQuotasProjectIDNotFound with default headers values
func NewPutQuotasProjectIDNotFound() *PutQuotasProjectIDNotFound {
	return &PutQuotasProjectIDNotFound{}
}

/*
PutQuotasProjectIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type PutQuotasProjectIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put quotas project Id not found response has a 2xx status code
func (o *PutQuotasProjectIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put quotas project Id not found response has a 3xx status code
func (o *PutQuotasProjectIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put quotas project Id not found response has a 4xx status code
func (o *PutQuotasProjectIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put quotas project Id not found response has a 5xx status code
func (o *PutQuotasProjectIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put quotas project Id not found response a status code equal to that given
func (o *PutQuotasProjectIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put quotas project Id not found response
func (o *PutQuotasProjectIDNotFound) Code() int {
	return 404
}

func (o *PutQuotasProjectIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdNotFound  %+v", 404, o.Payload)
}

func (o *PutQuotasProjectIDNotFound) String() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdNotFound  %+v", 404, o.Payload)
}

func (o *PutQuotasProjectIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutQuotasProjectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutQuotasProjectIDBody put quotas project ID body
swagger:model PutQuotasProjectIDBody
*/
type PutQuotasProjectIDBody struct {

	// quota
	// Required: true
	Quota *models.Quota `json:"quota"`
}

// Validate validates this put quotas project ID body
func (o *PutQuotasProjectIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDBody) validateQuota(formats strfmt.Registry) error {

	if err := validate.Required("quota"+"."+"quota", "body", o.Quota); err != nil {
		return err
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put quotas project ID body based on the context it is used
func (o *PutQuotasProjectIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutQuotasProjectIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutQuotasProjectIDBody) UnmarshalBinary(b []byte) error {
	var res PutQuotasProjectIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutQuotasProjectIDOKBody put quotas project ID o k body
swagger:model PutQuotasProjectIDOKBody
*/
type PutQuotasProjectIDOKBody struct {

	// quota
	Quota *models.Quota `json:"quota,omitempty"`
}

// Validate validates this put quotas project ID o k body
func (o *PutQuotasProjectIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDOKBody) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(o.Quota) { // not required
		return nil
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putQuotasProjectIdOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putQuotasProjectIdOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put quotas project ID o k body based on the context it is used
func (o *PutQuotasProjectIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDOKBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putQuotasProjectIdOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putQuotasProjectIdOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutQuotasProjectIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutQuotasProjectIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutQuotasProjectIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
