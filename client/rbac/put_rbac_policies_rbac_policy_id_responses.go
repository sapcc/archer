// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// PutRbacPoliciesRbacPolicyIDReader is a Reader for the PutRbacPoliciesRbacPolicyID structure.
type PutRbacPoliciesRbacPolicyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRbacPoliciesRbacPolicyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRbacPoliciesRbacPolicyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutRbacPoliciesRbacPolicyIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRbacPoliciesRbacPolicyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRbacPoliciesRbacPolicyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutRbacPoliciesRbacPolicyIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPutRbacPoliciesRbacPolicyIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRbacPoliciesRbacPolicyIDOK creates a PutRbacPoliciesRbacPolicyIDOK with default headers values
func NewPutRbacPoliciesRbacPolicyIDOK() *PutRbacPoliciesRbacPolicyIDOK {
	return &PutRbacPoliciesRbacPolicyIDOK{}
}

/*
PutRbacPoliciesRbacPolicyIDOK describes a response with status code 200, with default header values.

RBAC Policy
*/
type PutRbacPoliciesRbacPolicyIDOK struct {
	Payload *models.Rbacpolicy
}

// IsSuccess returns true when this put rbac policies rbac policy Id o k response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put rbac policies rbac policy Id o k response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id o k response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put rbac policies rbac policy Id o k response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id o k response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put rbac policies rbac policy Id o k response
func (o *PutRbacPoliciesRbacPolicyIDOK) Code() int {
	return 200
}

func (o *PutRbacPoliciesRbacPolicyIDOK) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdOK  %+v", 200, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDOK) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdOK  %+v", 200, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDOK) GetPayload() *models.Rbacpolicy {
	return o.Payload
}

func (o *PutRbacPoliciesRbacPolicyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rbacpolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRbacPoliciesRbacPolicyIDUnauthorized creates a PutRbacPoliciesRbacPolicyIDUnauthorized with default headers values
func NewPutRbacPoliciesRbacPolicyIDUnauthorized() *PutRbacPoliciesRbacPolicyIDUnauthorized {
	return &PutRbacPoliciesRbacPolicyIDUnauthorized{}
}

/*
PutRbacPoliciesRbacPolicyIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutRbacPoliciesRbacPolicyIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this put rbac policies rbac policy Id unauthorized response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put rbac policies rbac policy Id unauthorized response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id unauthorized response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put rbac policies rbac policy Id unauthorized response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id unauthorized response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put rbac policies rbac policy Id unauthorized response
func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) Code() int {
	return 401
}

func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRbacPoliciesRbacPolicyIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRbacPoliciesRbacPolicyIDForbidden creates a PutRbacPoliciesRbacPolicyIDForbidden with default headers values
func NewPutRbacPoliciesRbacPolicyIDForbidden() *PutRbacPoliciesRbacPolicyIDForbidden {
	return &PutRbacPoliciesRbacPolicyIDForbidden{}
}

/*
PutRbacPoliciesRbacPolicyIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutRbacPoliciesRbacPolicyIDForbidden struct {
}

// IsSuccess returns true when this put rbac policies rbac policy Id forbidden response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put rbac policies rbac policy Id forbidden response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id forbidden response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put rbac policies rbac policy Id forbidden response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id forbidden response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put rbac policies rbac policy Id forbidden response
func (o *PutRbacPoliciesRbacPolicyIDForbidden) Code() int {
	return 403
}

func (o *PutRbacPoliciesRbacPolicyIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdForbidden ", 403)
}

func (o *PutRbacPoliciesRbacPolicyIDForbidden) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdForbidden ", 403)
}

func (o *PutRbacPoliciesRbacPolicyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRbacPoliciesRbacPolicyIDNotFound creates a PutRbacPoliciesRbacPolicyIDNotFound with default headers values
func NewPutRbacPoliciesRbacPolicyIDNotFound() *PutRbacPoliciesRbacPolicyIDNotFound {
	return &PutRbacPoliciesRbacPolicyIDNotFound{}
}

/*
PutRbacPoliciesRbacPolicyIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutRbacPoliciesRbacPolicyIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put rbac policies rbac policy Id not found response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put rbac policies rbac policy Id not found response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id not found response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put rbac policies rbac policy Id not found response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id not found response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put rbac policies rbac policy Id not found response
func (o *PutRbacPoliciesRbacPolicyIDNotFound) Code() int {
	return 404
}

func (o *PutRbacPoliciesRbacPolicyIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDNotFound) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRbacPoliciesRbacPolicyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRbacPoliciesRbacPolicyIDConflict creates a PutRbacPoliciesRbacPolicyIDConflict with default headers values
func NewPutRbacPoliciesRbacPolicyIDConflict() *PutRbacPoliciesRbacPolicyIDConflict {
	return &PutRbacPoliciesRbacPolicyIDConflict{}
}

/*
PutRbacPoliciesRbacPolicyIDConflict describes a response with status code 409, with default header values.

Duplicate RBAC Policy
*/
type PutRbacPoliciesRbacPolicyIDConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this put rbac policies rbac policy Id conflict response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put rbac policies rbac policy Id conflict response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id conflict response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put rbac policies rbac policy Id conflict response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id conflict response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the put rbac policies rbac policy Id conflict response
func (o *PutRbacPoliciesRbacPolicyIDConflict) Code() int {
	return 409
}

func (o *PutRbacPoliciesRbacPolicyIDConflict) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdConflict  %+v", 409, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDConflict) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdConflict  %+v", 409, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRbacPoliciesRbacPolicyIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRbacPoliciesRbacPolicyIDUnprocessableEntity creates a PutRbacPoliciesRbacPolicyIDUnprocessableEntity with default headers values
func NewPutRbacPoliciesRbacPolicyIDUnprocessableEntity() *PutRbacPoliciesRbacPolicyIDUnprocessableEntity {
	return &PutRbacPoliciesRbacPolicyIDUnprocessableEntity{}
}

/*
PutRbacPoliciesRbacPolicyIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PutRbacPoliciesRbacPolicyIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this put rbac policies rbac policy Id unprocessable entity response has a 2xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put rbac policies rbac policy Id unprocessable entity response has a 3xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put rbac policies rbac policy Id unprocessable entity response has a 4xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this put rbac policies rbac policy Id unprocessable entity response has a 5xx status code
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this put rbac policies rbac policy Id unprocessable entity response a status code equal to that given
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the put rbac policies rbac policy Id unprocessable entity response
func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) Code() int {
	return 422
}

func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /rbac-policies/{rbac_policy_id}][%d] putRbacPoliciesRbacPolicyIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRbacPoliciesRbacPolicyIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
