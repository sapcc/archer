// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// GetRbacPoliciesRbacPolicyIDReader is a Reader for the GetRbacPoliciesRbacPolicyID structure.
type GetRbacPoliciesRbacPolicyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRbacPoliciesRbacPolicyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRbacPoliciesRbacPolicyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRbacPoliciesRbacPolicyIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRbacPoliciesRbacPolicyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRbacPoliciesRbacPolicyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetRbacPoliciesRbacPolicyIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRbacPoliciesRbacPolicyIDOK creates a GetRbacPoliciesRbacPolicyIDOK with default headers values
func NewGetRbacPoliciesRbacPolicyIDOK() *GetRbacPoliciesRbacPolicyIDOK {
	return &GetRbacPoliciesRbacPolicyIDOK{}
}

/*
GetRbacPoliciesRbacPolicyIDOK describes a response with status code 200, with default header values.

RBAC Policy
*/
type GetRbacPoliciesRbacPolicyIDOK struct {
	Payload *models.Rbacpolicy
}

// IsSuccess returns true when this get rbac policies rbac policy Id o k response has a 2xx status code
func (o *GetRbacPoliciesRbacPolicyIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rbac policies rbac policy Id o k response has a 3xx status code
func (o *GetRbacPoliciesRbacPolicyIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies rbac policy Id o k response has a 4xx status code
func (o *GetRbacPoliciesRbacPolicyIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rbac policies rbac policy Id o k response has a 5xx status code
func (o *GetRbacPoliciesRbacPolicyIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies rbac policy Id o k response a status code equal to that given
func (o *GetRbacPoliciesRbacPolicyIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rbac policies rbac policy Id o k response
func (o *GetRbacPoliciesRbacPolicyIDOK) Code() int {
	return 200
}

func (o *GetRbacPoliciesRbacPolicyIDOK) Error() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdOK  %+v", 200, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDOK) String() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdOK  %+v", 200, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDOK) GetPayload() *models.Rbacpolicy {
	return o.Payload
}

func (o *GetRbacPoliciesRbacPolicyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rbacpolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesRbacPolicyIDUnauthorized creates a GetRbacPoliciesRbacPolicyIDUnauthorized with default headers values
func NewGetRbacPoliciesRbacPolicyIDUnauthorized() *GetRbacPoliciesRbacPolicyIDUnauthorized {
	return &GetRbacPoliciesRbacPolicyIDUnauthorized{}
}

/*
GetRbacPoliciesRbacPolicyIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRbacPoliciesRbacPolicyIDUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies rbac policy Id unauthorized response has a 2xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies rbac policy Id unauthorized response has a 3xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies rbac policy Id unauthorized response has a 4xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies rbac policy Id unauthorized response has a 5xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies rbac policy Id unauthorized response a status code equal to that given
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get rbac policies rbac policy Id unauthorized response
func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) Code() int {
	return 401
}

func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesRbacPolicyIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesRbacPolicyIDForbidden creates a GetRbacPoliciesRbacPolicyIDForbidden with default headers values
func NewGetRbacPoliciesRbacPolicyIDForbidden() *GetRbacPoliciesRbacPolicyIDForbidden {
	return &GetRbacPoliciesRbacPolicyIDForbidden{}
}

/*
GetRbacPoliciesRbacPolicyIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRbacPoliciesRbacPolicyIDForbidden struct {
}

// IsSuccess returns true when this get rbac policies rbac policy Id forbidden response has a 2xx status code
func (o *GetRbacPoliciesRbacPolicyIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies rbac policy Id forbidden response has a 3xx status code
func (o *GetRbacPoliciesRbacPolicyIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies rbac policy Id forbidden response has a 4xx status code
func (o *GetRbacPoliciesRbacPolicyIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies rbac policy Id forbidden response has a 5xx status code
func (o *GetRbacPoliciesRbacPolicyIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies rbac policy Id forbidden response a status code equal to that given
func (o *GetRbacPoliciesRbacPolicyIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rbac policies rbac policy Id forbidden response
func (o *GetRbacPoliciesRbacPolicyIDForbidden) Code() int {
	return 403
}

func (o *GetRbacPoliciesRbacPolicyIDForbidden) Error() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdForbidden ", 403)
}

func (o *GetRbacPoliciesRbacPolicyIDForbidden) String() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdForbidden ", 403)
}

func (o *GetRbacPoliciesRbacPolicyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRbacPoliciesRbacPolicyIDNotFound creates a GetRbacPoliciesRbacPolicyIDNotFound with default headers values
func NewGetRbacPoliciesRbacPolicyIDNotFound() *GetRbacPoliciesRbacPolicyIDNotFound {
	return &GetRbacPoliciesRbacPolicyIDNotFound{}
}

/*
GetRbacPoliciesRbacPolicyIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRbacPoliciesRbacPolicyIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies rbac policy Id not found response has a 2xx status code
func (o *GetRbacPoliciesRbacPolicyIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies rbac policy Id not found response has a 3xx status code
func (o *GetRbacPoliciesRbacPolicyIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies rbac policy Id not found response has a 4xx status code
func (o *GetRbacPoliciesRbacPolicyIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies rbac policy Id not found response has a 5xx status code
func (o *GetRbacPoliciesRbacPolicyIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies rbac policy Id not found response a status code equal to that given
func (o *GetRbacPoliciesRbacPolicyIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get rbac policies rbac policy Id not found response
func (o *GetRbacPoliciesRbacPolicyIDNotFound) Code() int {
	return 404
}

func (o *GetRbacPoliciesRbacPolicyIDNotFound) Error() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDNotFound) String() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesRbacPolicyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesRbacPolicyIDUnprocessableEntity creates a GetRbacPoliciesRbacPolicyIDUnprocessableEntity with default headers values
func NewGetRbacPoliciesRbacPolicyIDUnprocessableEntity() *GetRbacPoliciesRbacPolicyIDUnprocessableEntity {
	return &GetRbacPoliciesRbacPolicyIDUnprocessableEntity{}
}

/*
GetRbacPoliciesRbacPolicyIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetRbacPoliciesRbacPolicyIDUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies rbac policy Id unprocessable entity response has a 2xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies rbac policy Id unprocessable entity response has a 3xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies rbac policy Id unprocessable entity response has a 4xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies rbac policy Id unprocessable entity response has a 5xx status code
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies rbac policy Id unprocessable entity response a status code equal to that given
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get rbac policies rbac policy Id unprocessable entity response
func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) Code() int {
	return 422
}

func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /rbac-policies/{rbac_policy_id}][%d] getRbacPoliciesRbacPolicyIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesRbacPolicyIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
