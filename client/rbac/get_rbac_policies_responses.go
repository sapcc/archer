// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/archer/models"
)

// GetRbacPoliciesReader is a Reader for the GetRbacPolicies structure.
type GetRbacPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRbacPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRbacPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRbacPoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRbacPoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRbacPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetRbacPoliciesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRbacPoliciesOK creates a GetRbacPoliciesOK with default headers values
func NewGetRbacPoliciesOK() *GetRbacPoliciesOK {
	return &GetRbacPoliciesOK{}
}

/*
GetRbacPoliciesOK describes a response with status code 200, with default header values.

A JSON array of rbac policies
*/
type GetRbacPoliciesOK struct {
	Payload *GetRbacPoliciesOKBody
}

// IsSuccess returns true when this get rbac policies o k response has a 2xx status code
func (o *GetRbacPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rbac policies o k response has a 3xx status code
func (o *GetRbacPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies o k response has a 4xx status code
func (o *GetRbacPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rbac policies o k response has a 5xx status code
func (o *GetRbacPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies o k response a status code equal to that given
func (o *GetRbacPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rbac policies o k response
func (o *GetRbacPoliciesOK) Code() int {
	return 200
}

func (o *GetRbacPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetRbacPoliciesOK) String() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetRbacPoliciesOK) GetPayload() *GetRbacPoliciesOKBody {
	return o.Payload
}

func (o *GetRbacPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRbacPoliciesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesBadRequest creates a GetRbacPoliciesBadRequest with default headers values
func NewGetRbacPoliciesBadRequest() *GetRbacPoliciesBadRequest {
	return &GetRbacPoliciesBadRequest{}
}

/*
GetRbacPoliciesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetRbacPoliciesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies bad request response has a 2xx status code
func (o *GetRbacPoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies bad request response has a 3xx status code
func (o *GetRbacPoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies bad request response has a 4xx status code
func (o *GetRbacPoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies bad request response has a 5xx status code
func (o *GetRbacPoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies bad request response a status code equal to that given
func (o *GetRbacPoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get rbac policies bad request response
func (o *GetRbacPoliciesBadRequest) Code() int {
	return 400
}

func (o *GetRbacPoliciesBadRequest) Error() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRbacPoliciesBadRequest) String() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRbacPoliciesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesUnauthorized creates a GetRbacPoliciesUnauthorized with default headers values
func NewGetRbacPoliciesUnauthorized() *GetRbacPoliciesUnauthorized {
	return &GetRbacPoliciesUnauthorized{}
}

/*
GetRbacPoliciesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRbacPoliciesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies unauthorized response has a 2xx status code
func (o *GetRbacPoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies unauthorized response has a 3xx status code
func (o *GetRbacPoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies unauthorized response has a 4xx status code
func (o *GetRbacPoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies unauthorized response has a 5xx status code
func (o *GetRbacPoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies unauthorized response a status code equal to that given
func (o *GetRbacPoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get rbac policies unauthorized response
func (o *GetRbacPoliciesUnauthorized) Code() int {
	return 401
}

func (o *GetRbacPoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRbacPoliciesUnauthorized) String() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRbacPoliciesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRbacPoliciesForbidden creates a GetRbacPoliciesForbidden with default headers values
func NewGetRbacPoliciesForbidden() *GetRbacPoliciesForbidden {
	return &GetRbacPoliciesForbidden{}
}

/*
GetRbacPoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRbacPoliciesForbidden struct {
}

// IsSuccess returns true when this get rbac policies forbidden response has a 2xx status code
func (o *GetRbacPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies forbidden response has a 3xx status code
func (o *GetRbacPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies forbidden response has a 4xx status code
func (o *GetRbacPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies forbidden response has a 5xx status code
func (o *GetRbacPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies forbidden response a status code equal to that given
func (o *GetRbacPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rbac policies forbidden response
func (o *GetRbacPoliciesForbidden) Code() int {
	return 403
}

func (o *GetRbacPoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesForbidden ", 403)
}

func (o *GetRbacPoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesForbidden ", 403)
}

func (o *GetRbacPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRbacPoliciesUnprocessableEntity creates a GetRbacPoliciesUnprocessableEntity with default headers values
func NewGetRbacPoliciesUnprocessableEntity() *GetRbacPoliciesUnprocessableEntity {
	return &GetRbacPoliciesUnprocessableEntity{}
}

/*
GetRbacPoliciesUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type GetRbacPoliciesUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this get rbac policies unprocessable entity response has a 2xx status code
func (o *GetRbacPoliciesUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rbac policies unprocessable entity response has a 3xx status code
func (o *GetRbacPoliciesUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rbac policies unprocessable entity response has a 4xx status code
func (o *GetRbacPoliciesUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rbac policies unprocessable entity response has a 5xx status code
func (o *GetRbacPoliciesUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get rbac policies unprocessable entity response a status code equal to that given
func (o *GetRbacPoliciesUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get rbac policies unprocessable entity response
func (o *GetRbacPoliciesUnprocessableEntity) Code() int {
	return 422
}

func (o *GetRbacPoliciesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetRbacPoliciesUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /rbac-policies][%d] getRbacPoliciesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetRbacPoliciesUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRbacPoliciesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRbacPoliciesOKBody get rbac policies o k body
swagger:model GetRbacPoliciesOKBody
*/
type GetRbacPoliciesOKBody struct {

	// items
	Items []*models.Rbacpolicy `json:"items"`

	// links
	Links []*models.Link `json:"links,omitempty"`
}

// Validate validates this get rbac policies o k body
func (o *GetRbacPoliciesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRbacPoliciesOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRbacPoliciesOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRbacPoliciesOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetRbacPoliciesOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRbacPoliciesOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRbacPoliciesOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get rbac policies o k body based on the context it is used
func (o *GetRbacPoliciesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRbacPoliciesOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRbacPoliciesOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRbacPoliciesOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetRbacPoliciesOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRbacPoliciesOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRbacPoliciesOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRbacPoliciesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRbacPoliciesOKBody) UnmarshalBinary(b []byte) error {
	var res GetRbacPoliciesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
