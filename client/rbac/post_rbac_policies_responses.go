// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbac

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/archer/models"
)

// PostRbacPoliciesReader is a Reader for the PostRbacPolicies structure.
type PostRbacPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRbacPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRbacPoliciesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRbacPoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRbacPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRbacPoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRbacPoliciesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostRbacPoliciesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRbacPoliciesCreated creates a PostRbacPoliciesCreated with default headers values
func NewPostRbacPoliciesCreated() *PostRbacPoliciesCreated {
	return &PostRbacPoliciesCreated{}
}

/*
PostRbacPoliciesCreated describes a response with status code 201, with default header values.

RBAC policy
*/
type PostRbacPoliciesCreated struct {
	Payload *models.Rbacpolicy
}

// IsSuccess returns true when this post rbac policies created response has a 2xx status code
func (o *PostRbacPoliciesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post rbac policies created response has a 3xx status code
func (o *PostRbacPoliciesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies created response has a 4xx status code
func (o *PostRbacPoliciesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post rbac policies created response has a 5xx status code
func (o *PostRbacPoliciesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies created response a status code equal to that given
func (o *PostRbacPoliciesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post rbac policies created response
func (o *PostRbacPoliciesCreated) Code() int {
	return 201
}

func (o *PostRbacPoliciesCreated) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesCreated  %+v", 201, o.Payload)
}

func (o *PostRbacPoliciesCreated) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesCreated  %+v", 201, o.Payload)
}

func (o *PostRbacPoliciesCreated) GetPayload() *models.Rbacpolicy {
	return o.Payload
}

func (o *PostRbacPoliciesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rbacpolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRbacPoliciesUnauthorized creates a PostRbacPoliciesUnauthorized with default headers values
func NewPostRbacPoliciesUnauthorized() *PostRbacPoliciesUnauthorized {
	return &PostRbacPoliciesUnauthorized{}
}

/*
PostRbacPoliciesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostRbacPoliciesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this post rbac policies unauthorized response has a 2xx status code
func (o *PostRbacPoliciesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rbac policies unauthorized response has a 3xx status code
func (o *PostRbacPoliciesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies unauthorized response has a 4xx status code
func (o *PostRbacPoliciesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rbac policies unauthorized response has a 5xx status code
func (o *PostRbacPoliciesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies unauthorized response a status code equal to that given
func (o *PostRbacPoliciesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post rbac policies unauthorized response
func (o *PostRbacPoliciesUnauthorized) Code() int {
	return 401
}

func (o *PostRbacPoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRbacPoliciesUnauthorized) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRbacPoliciesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRbacPoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRbacPoliciesForbidden creates a PostRbacPoliciesForbidden with default headers values
func NewPostRbacPoliciesForbidden() *PostRbacPoliciesForbidden {
	return &PostRbacPoliciesForbidden{}
}

/*
PostRbacPoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostRbacPoliciesForbidden struct {
}

// IsSuccess returns true when this post rbac policies forbidden response has a 2xx status code
func (o *PostRbacPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rbac policies forbidden response has a 3xx status code
func (o *PostRbacPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies forbidden response has a 4xx status code
func (o *PostRbacPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rbac policies forbidden response has a 5xx status code
func (o *PostRbacPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies forbidden response a status code equal to that given
func (o *PostRbacPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post rbac policies forbidden response
func (o *PostRbacPoliciesForbidden) Code() int {
	return 403
}

func (o *PostRbacPoliciesForbidden) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesForbidden ", 403)
}

func (o *PostRbacPoliciesForbidden) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesForbidden ", 403)
}

func (o *PostRbacPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRbacPoliciesNotFound creates a PostRbacPoliciesNotFound with default headers values
func NewPostRbacPoliciesNotFound() *PostRbacPoliciesNotFound {
	return &PostRbacPoliciesNotFound{}
}

/*
PostRbacPoliciesNotFound describes a response with status code 404, with default header values.

service_id not found
*/
type PostRbacPoliciesNotFound struct {
}

// IsSuccess returns true when this post rbac policies not found response has a 2xx status code
func (o *PostRbacPoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rbac policies not found response has a 3xx status code
func (o *PostRbacPoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies not found response has a 4xx status code
func (o *PostRbacPoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rbac policies not found response has a 5xx status code
func (o *PostRbacPoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies not found response a status code equal to that given
func (o *PostRbacPoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post rbac policies not found response
func (o *PostRbacPoliciesNotFound) Code() int {
	return 404
}

func (o *PostRbacPoliciesNotFound) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesNotFound ", 404)
}

func (o *PostRbacPoliciesNotFound) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesNotFound ", 404)
}

func (o *PostRbacPoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRbacPoliciesConflict creates a PostRbacPoliciesConflict with default headers values
func NewPostRbacPoliciesConflict() *PostRbacPoliciesConflict {
	return &PostRbacPoliciesConflict{}
}

/*
PostRbacPoliciesConflict describes a response with status code 409, with default header values.

Duplicate RBAC Policy
*/
type PostRbacPoliciesConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this post rbac policies conflict response has a 2xx status code
func (o *PostRbacPoliciesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rbac policies conflict response has a 3xx status code
func (o *PostRbacPoliciesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies conflict response has a 4xx status code
func (o *PostRbacPoliciesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rbac policies conflict response has a 5xx status code
func (o *PostRbacPoliciesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies conflict response a status code equal to that given
func (o *PostRbacPoliciesConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post rbac policies conflict response
func (o *PostRbacPoliciesConflict) Code() int {
	return 409
}

func (o *PostRbacPoliciesConflict) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesConflict  %+v", 409, o.Payload)
}

func (o *PostRbacPoliciesConflict) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesConflict  %+v", 409, o.Payload)
}

func (o *PostRbacPoliciesConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRbacPoliciesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRbacPoliciesUnprocessableEntity creates a PostRbacPoliciesUnprocessableEntity with default headers values
func NewPostRbacPoliciesUnprocessableEntity() *PostRbacPoliciesUnprocessableEntity {
	return &PostRbacPoliciesUnprocessableEntity{}
}

/*
PostRbacPoliciesUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Content
*/
type PostRbacPoliciesUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this post rbac policies unprocessable entity response has a 2xx status code
func (o *PostRbacPoliciesUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rbac policies unprocessable entity response has a 3xx status code
func (o *PostRbacPoliciesUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rbac policies unprocessable entity response has a 4xx status code
func (o *PostRbacPoliciesUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rbac policies unprocessable entity response has a 5xx status code
func (o *PostRbacPoliciesUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post rbac policies unprocessable entity response a status code equal to that given
func (o *PostRbacPoliciesUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post rbac policies unprocessable entity response
func (o *PostRbacPoliciesUnprocessableEntity) Code() int {
	return 422
}

func (o *PostRbacPoliciesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostRbacPoliciesUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /rbac-policies][%d] postRbacPoliciesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostRbacPoliciesUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRbacPoliciesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
