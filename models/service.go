// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
//
// swagger:model Service
type Service struct {

	// Availability zone of this service.
	// Example: AZ-A
	AvailabilityZone *string `json:"availability_zone"`

	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Description of the service.
	// Example: An example of an Service.
	// Max Length: 255
	Description string `json:"description"`

	// Enable/disable this service. Existing endpoints are not touched by this.
	Enabled *bool `json:"enabled,omitempty"`

	// Device host.
	// Read Only: true
	Host *string `json:"host,omitempty"`

	// The ID of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// IP Addresses of the providing service, multiple addresses will be round robin load balanced.
	// Required: true
	// Min Items: 1
	IPAddresses []strfmt.IPv4 `json:"ip_addresses"`

	// Name of the service.
	// Example: ExampleService
	// Max Length: 64
	Name string `json:"name"`

	// Network ID of the network that provides this service.
	// Required: true
	// Format: uuid
	NetworkID *strfmt.UUID `json:"network_id"`

	// Port exposed by the service.
	// Example: 80
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port int32 `json:"port"`

	// project id
	ProjectID Project `json:"project_id"`

	// Provider type, defaults to tenant type.
	// Enum: [tenant cp]
	Provider *string `json:"provider,omitempty"`

	// Proxy protocol v2 enabled for this service.
	ProxyProtocol *bool `json:"proxy_protocol,omitempty"`

	// Require explicit project approval for the service owner.
	RequireApproval *bool `json:"require_approval,omitempty"`

	// Status of the service.
	//
	// ### Status can be one of
	// | Status           | Description                            |
	// | ---------------- | -------------------------------------- |
	// | AVAILABLE        | Service is ready for consumption.      |
	// | PENDING_CREATE   | Service is being set up                |
	// | PENDING_UPDATE   | Service is being updated               |
	// | PENDING_DELETE   | Service is being deleted               |
	// | UNAVAILABLE      | Service is unavailable (e.g. disabled) |
	//
	// Read Only: true
	// Enum: [AVAILABLE PENDING_CREATE PENDING_UPDATE PENDING_DELETE UNAVAILABLE]
	Status string `json:"status,omitempty"`

	// The list of tags on the resource.
	Tags []string `json:"tags"`

	// updated at
	UpdatedAt time.Time `json:"updated_at,omitempty"`

	// Set global visibility of the service. For `private` visibility, RBAC policies can extend the visibility to specific projects.
	// Enum: [private public]
	Visibility *string `json:"visibility,omitempty"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	return nil
}

func (m *Service) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 255); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("ip_addresses", "body", m.IPAddresses); err != nil {
		return err
	}

	iIPAddressesSize := int64(len(m.IPAddresses))

	if err := validate.MinItems("ip_addresses", "body", iIPAddressesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.IPAddresses); i++ {

		if err := validate.FormatOf("ip_addresses"+"."+strconv.Itoa(i), "body", "ipv4", m.IPAddresses[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("network_id", "body", m.NetworkID); err != nil {
		return err
	}

	if err := validate.FormatOf("network_id", "body", "uuid", m.NetworkID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Service) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", int32(m.Port)); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := m.ProjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

var serviceTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tenant","cp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeProviderPropEnum = append(serviceTypeProviderPropEnum, v)
	}
}

const (

	// ServiceProviderTenant captures enum value "tenant"
	ServiceProviderTenant string = "tenant"

	// ServiceProviderCp captures enum value "cp"
	ServiceProviderCp string = "cp"
)

// prop value enum
func (m *Service) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", *m.Provider); err != nil {
		return err
	}

	return nil
}

var serviceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","PENDING_CREATE","PENDING_UPDATE","PENDING_DELETE","UNAVAILABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeStatusPropEnum = append(serviceTypeStatusPropEnum, v)
	}
}

const (

	// ServiceStatusAVAILABLE captures enum value "AVAILABLE"
	ServiceStatusAVAILABLE string = "AVAILABLE"

	// ServiceStatusPENDINGCREATE captures enum value "PENDING_CREATE"
	ServiceStatusPENDINGCREATE string = "PENDING_CREATE"

	// ServiceStatusPENDINGUPDATE captures enum value "PENDING_UPDATE"
	ServiceStatusPENDINGUPDATE string = "PENDING_UPDATE"

	// ServiceStatusPENDINGDELETE captures enum value "PENDING_DELETE"
	ServiceStatusPENDINGDELETE string = "PENDING_DELETE"

	// ServiceStatusUNAVAILABLE captures enum value "UNAVAILABLE"
	ServiceStatusUNAVAILABLE string = "UNAVAILABLE"
)

// prop value enum
func (m *Service) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MaxLength("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], 64); err != nil {
			return err
		}

	}

	return nil
}

func (m *Service) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	return nil
}

var serviceTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeVisibilityPropEnum = append(serviceTypeVisibilityPropEnum, v)
	}
}

const (

	// ServiceVisibilityPrivate captures enum value "private"
	ServiceVisibilityPrivate string = "private"

	// ServiceVisibilityPublic captures enum value "public"
	ServiceVisibilityPublic string = "public"
)

// prop value enum
func (m *Service) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service based on the context it is used
func (m *Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *Service) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Service) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProjectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

func (m *Service) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
