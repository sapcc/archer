// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceUpdatable service updatable
//
// swagger:model ServiceUpdatable
type ServiceUpdatable struct {

	// Description of the service.
	// Example: An example of an Service.
	// Max Length: 255
	Description *string `json:"description,omitempty"`

	// Enable/disable this service. Existing endpoints are not touched by this.
	Enabled *bool `json:"enabled,omitempty"`

	// IP Addresses of the providing service, multiple addresses will be round robin load balanced.
	// Min Items: 1
	IPAddresses []strfmt.IPv4 `json:"ip_addresses"`

	// Name of the service.
	// Example: ExampleService
	// Max Length: 64
	Name *string `json:"name,omitempty"`

	// Port exposed by the service.
	// Example: 80
	// Maximum: 65535
	// Minimum: 1
	Port *int32 `json:"port,omitempty"`

	// Proxy protocol v2 enabled for this service.
	ProxyProtocol *bool `json:"proxy_protocol,omitempty"`

	// Require explicit project approval for the service owner.
	RequireApproval *bool `json:"require_approval,omitempty"`

	// The list of tags on the resource.
	Tags []string `json:"tags"`

	// Set global visibility of the service. For `private` visibility, RBAC policies can extend the visibility to specific projects.
	// Enum: [private public]
	Visibility *string `json:"visibility,omitempty"`
}

// Validate validates this service updatable
func (m *ServiceUpdatable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceUpdatable) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", *m.Description, 255); err != nil {
		return err
	}

	return nil
}

func (m *ServiceUpdatable) validateIPAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddresses) { // not required
		return nil
	}

	iIPAddressesSize := int64(len(m.IPAddresses))

	if err := validate.MinItems("ip_addresses", "body", iIPAddressesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.IPAddresses); i++ {

		if err := validate.FormatOf("ip_addresses"+"."+strconv.Itoa(i), "body", "ipv4", m.IPAddresses[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ServiceUpdatable) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", *m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *ServiceUpdatable) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServiceUpdatable) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MaxLength("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], 64); err != nil {
			return err
		}

	}

	return nil
}

var serviceUpdatableTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceUpdatableTypeVisibilityPropEnum = append(serviceUpdatableTypeVisibilityPropEnum, v)
	}
}

const (

	// ServiceUpdatableVisibilityPrivate captures enum value "private"
	ServiceUpdatableVisibilityPrivate string = "private"

	// ServiceUpdatableVisibilityPublic captures enum value "public"
	ServiceUpdatableVisibilityPublic string = "public"
)

// prop value enum
func (m *ServiceUpdatable) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceUpdatableTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceUpdatable) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service updatable based on context it is used
func (m *ServiceUpdatable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpdatable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpdatable) UnmarshalBinary(b []byte) error {
	var res ServiceUpdatable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
