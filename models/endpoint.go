// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Endpoint endpoint
//
// swagger:model Endpoint
type Endpoint struct {

	// The ID of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// project id
	ProjectID Project `json:"project_id,omitempty"`

	// Proxy protocol enabled for this endpoint.
	ProxyProtocol bool `json:"proxy_protocol,omitempty"`

	// The ID of the service.
	// Format: uuid
	ServiceID strfmt.UUID `json:"service_id,omitempty"`

	// The name of the service.
	// Example: Example Service
	// Read Only: true
	ServiceName string `json:"service_name,omitempty"`

	// status
	Status EndpointStatus `json:"status,omitempty"`

	// Endpoint network target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Format: uuid
	TargetNetwork strfmt.UUID `json:"target_network,omitempty"`

	// Endpoint port target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Example: b2accf1a-1c99-4b54-9eeb-22be53f177f5
	// Format: uuid
	TargetPort strfmt.UUID `json:"target_port,omitempty"`

	// Endpoint subnet target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Format: uuid
	TargetSubnet strfmt.UUID `json:"target_subnet,omitempty"`
}

// Validate validates this endpoint
func (m *Endpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := m.ProjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

func (m *Endpoint) validateServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("service_id", "body", "uuid", m.ServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Endpoint) validateTargetNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNetwork) { // not required
		return nil
	}

	if err := validate.FormatOf("target_network", "body", "uuid", m.TargetNetwork.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateTargetPort(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetPort) { // not required
		return nil
	}

	if err := validate.FormatOf("target_port", "body", "uuid", m.TargetPort.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateTargetSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetSubnet) { // not required
		return nil
	}

	if err := validate.FormatOf("target_subnet", "body", "uuid", m.TargetSubnet.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this endpoint based on the context it is used
func (m *Endpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProjectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateServiceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "service_name", "body", string(m.ServiceName)); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Endpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Endpoint) UnmarshalBinary(b []byte) error {
	var res Endpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
