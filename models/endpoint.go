// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Endpoint endpoint
//
// swagger:model Endpoint
type Endpoint struct {

	// created at
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Description of the endpoint.
	// Example: An example of an endpoint.
	// Max Length: 255
	Description string `json:"description"`

	// The ID of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Endpoint IP address.
	// Example: 1.2.3.4
	// Read Only: true
	// Format: ipv4
	IPAddress strfmt.IPv4 `json:"ip_address,omitempty"`

	// Name of the endpoint.
	// Example: Example endpoint.
	// Max Length: 64
	Name string `json:"name"`

	// project id
	ProjectID Project `json:"project_id"`

	// The ID of the service.
	// Format: uuid
	ServiceID strfmt.UUID `json:"service_id,omitempty"`

	// status
	Status EndpointStatus `json:"status,omitempty"`

	// The list of tags on the resource.
	Tags []string `json:"tags"`

	// target
	Target EndpointTarget `json:"target,omitempty"`

	// updated at
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// Validate validates this endpoint
func (m *Endpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	return nil
}

func (m *Endpoint) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 255); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateIPAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.FormatOf("ip_address", "body", "ipv4", m.IPAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := m.ProjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

func (m *Endpoint) validateServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("service_id", "body", "uuid", m.ServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Endpoint) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MaxLength("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], 64); err != nil {
			return err
		}

	}

	return nil
}

func (m *Endpoint) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if err := m.Target.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("target")
		}
		return err
	}

	return nil
}

func (m *Endpoint) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this endpoint based on the context it is used
func (m *Endpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateIPAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ip_address", "body", strfmt.IPv4(m.IPAddress)); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProjectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("project_id")
		}
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Endpoint) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Target.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("target")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Endpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Endpoint) UnmarshalBinary(b []byte) error {
	var res Endpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EndpointTarget Endpoint target
//
// swagger:model EndpointTarget
type EndpointTarget struct {

	// Endpoint network target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Example: 49b6480b-24d3-4376-a4c9-aecbb89e16d9
	// Format: uuid
	Network *strfmt.UUID `json:"network,omitempty"`

	// Endpoint port target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Example: b2accf1a-1c99-4b54-9eeb-22be53f177f5
	// Format: uuid
	Port *strfmt.UUID `json:"port,omitempty"`

	// Endpoint subnet target. One of `target_network`, `target_subnet` or `target_port` must be specified.
	// Example: 1fb12a1a-a1a5-4732-9a2e-635ba6ec8d3b
	// Format: uuid
	Subnet *strfmt.UUID `json:"subnet,omitempty"`
}

// Validate validates this endpoint target
func (m *EndpointTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointTarget) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if err := validate.FormatOf("target"+"."+"network", "body", "uuid", m.Network.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EndpointTarget) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.FormatOf("target"+"."+"port", "body", "uuid", m.Port.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EndpointTarget) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if err := validate.FormatOf("target"+"."+"subnet", "body", "uuid", m.Subnet.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this endpoint target based on context it is used
func (m *EndpointTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EndpointTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointTarget) UnmarshalBinary(b []byte) error {
	var res EndpointTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
