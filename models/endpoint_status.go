// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EndpointStatus Status of the endpoint
//
// ### Status can be one of
// | Status             | Description                           |
// | ------------------ | ------------------------------------- |
// | AVAILABLE          | Endpoint is avaiable for consumption  |
// | PENDING_APPROVAL   | Endpoint is waiting for approval      |
// | PENDING_CREATE     | Endpoint is being set up              |
// | PENDING_UPDATE     | Endpoint is being updated             |
// | PENDING_REJECTED   | Endpoint is being rejected            |
// | PENDING_DELETE     | Endpoint is being deleted             |
// | REJECTED           | Endpoint was rejected                 |
// | FAILED             | Endpoint setup failed                 |
//
// swagger:model EndpointStatus
type EndpointStatus string

func NewEndpointStatus(value EndpointStatus) *EndpointStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EndpointStatus.
func (m EndpointStatus) Pointer() *EndpointStatus {
	return &m
}

const (

	// EndpointStatusAVAILABLE captures enum value "AVAILABLE"
	EndpointStatusAVAILABLE EndpointStatus = "AVAILABLE"

	// EndpointStatusPENDINGAPPROVAL captures enum value "PENDING_APPROVAL"
	EndpointStatusPENDINGAPPROVAL EndpointStatus = "PENDING_APPROVAL"

	// EndpointStatusPENDINGCREATE captures enum value "PENDING_CREATE"
	EndpointStatusPENDINGCREATE EndpointStatus = "PENDING_CREATE"

	// EndpointStatusPENDINGUPDATE captures enum value "PENDING_UPDATE"
	EndpointStatusPENDINGUPDATE EndpointStatus = "PENDING_UPDATE"

	// EndpointStatusPENDINGREJECTED captures enum value "PENDING_REJECTED"
	EndpointStatusPENDINGREJECTED EndpointStatus = "PENDING_REJECTED"

	// EndpointStatusPENDINGDELETE captures enum value "PENDING_DELETE"
	EndpointStatusPENDINGDELETE EndpointStatus = "PENDING_DELETE"

	// EndpointStatusREJECTED captures enum value "REJECTED"
	EndpointStatusREJECTED EndpointStatus = "REJECTED"

	// EndpointStatusFAILED captures enum value "FAILED"
	EndpointStatusFAILED EndpointStatus = "FAILED"
)

// for schema
var endpointStatusEnum []interface{}

func init() {
	var res []EndpointStatus
	if err := json.Unmarshal([]byte(`["AVAILABLE","PENDING_APPROVAL","PENDING_CREATE","PENDING_UPDATE","PENDING_REJECTED","PENDING_DELETE","REJECTED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointStatusEnum = append(endpointStatusEnum, v)
	}
}

func (m EndpointStatus) validateEndpointStatusEnum(path, location string, value EndpointStatus) error {
	if err := validate.EnumCase(path, location, value, endpointStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this endpoint status
func (m EndpointStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEndpointStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this endpoint status based on the context it is used
func (m EndpointStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", EndpointStatus(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
