// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointConsumerList list of consumer ids.
//
// swagger:model EndpointConsumerList
type EndpointConsumerList struct {

	// endpoint ids
	EndpointIds []strfmt.UUID `json:"endpoint_ids"`

	// project ids
	ProjectIds []Project `json:"project_ids"`
}

// Validate validates this endpoint consumer list
func (m *EndpointConsumerList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointConsumerList) validateEndpointIds(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointIds) { // not required
		return nil
	}

	for i := 0; i < len(m.EndpointIds); i++ {

		if err := validate.FormatOf("endpoint_ids"+"."+strconv.Itoa(i), "body", "uuid", m.EndpointIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *EndpointConsumerList) validateProjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectIds) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectIds); i++ {

		if err := m.ProjectIds[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_ids" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_ids" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this endpoint consumer list based on the context it is used
func (m *EndpointConsumerList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointConsumerList) contextValidateProjectIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProjectIds); i++ {

		if err := m.ProjectIds[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_ids" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_ids" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointConsumerList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointConsumerList) UnmarshalBinary(b []byte) error {
	var res EndpointConsumerList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
